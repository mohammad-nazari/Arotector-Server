/* Server_SoapH.h
   Generated by gSOAP 2.8.27 from F:\Projects\WebService\GeneratedCode\Protector\source\WebService\Protector.h

gSOAP XML Web services tools
Copyright (C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef Server_SoapH_H
#define Server_SoapH_H
#include "Server_SoapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 Server_Soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 Server_Soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 Server_Soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 Server_Soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( ((data) ? (soap_default_byte(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_byte(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (17)
#endif

#define soap_default_xsd__int(soap, a) soap_default_int(soap, a)


#define soap_xsd__int2s soap_int2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap*, const char*, int, const int *, const char*);

#define soap_s2xsd__int soap_s2int

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_xsd__int(struct soap*, const char*, int *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_xsd__int
#define soap_write_xsd__int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_xsd__int(soap, data, "xsd:int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_xsd__int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_xsd__int
#define soap_read_xsd__int(soap, data) ( ((data) ? (soap_default_xsd__int(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xsd__int(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( ((data) ? (soap_default_int(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_int(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_long
#define SOAP_TYPE_long (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_long(struct soap*, long *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_long(struct soap*, const char*, int, const long *, const char*);
SOAP_FMAC3 long * SOAP_FMAC4 soap_in_long(struct soap*, const char*, long *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_long(struct soap*, const long *, const char*, const char*);

#ifndef soap_write_long
#define soap_write_long(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_long(soap, data, "long", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_long(struct soap*, long *, const char*, const char*);

#ifndef soap_read_long
#define soap_read_long(soap, data) ( ((data) ? (soap_default_long(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_long(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__long
#define SOAP_TYPE_xsd__long (25)
#endif

#define soap_default_xsd__long(soap, a) soap_default_LONG64(soap, a)


#define soap_xsd__long2s soap_LONG642s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap*, const char*, int, const LONG64 *, const char*);

#define soap_s2xsd__long soap_s2LONG64

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_xsd__long(struct soap*, const char*, LONG64 *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__long(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write_xsd__long
#define soap_write_xsd__long(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_xsd__long(soap, data, "xsd:long", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_xsd__long(struct soap*, LONG64 *, const char*, const char*);

#ifndef soap_read_xsd__long
#define soap_read_xsd__long(soap, data) ( ((data) ? (soap_default_xsd__long(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xsd__long(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_LONG64
#define SOAP_TYPE_LONG64 (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap*, LONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write_LONG64
#define soap_write_LONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_LONG64(soap, data, "long", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

#ifndef soap_read_LONG64
#define soap_read_LONG64(soap, data) ( ((data) ? (soap_default_LONG64(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_LONG64(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_float
#define SOAP_TYPE_float (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap*, float *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

#ifndef soap_write_float
#define soap_write_float(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_float(soap, data, "float", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

#ifndef soap_read_float
#define soap_read_float(soap, data) ( ((data) ? (soap_default_float(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_float(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__double
#define SOAP_TYPE_xsd__double (21)
#endif

#define soap_default_xsd__double(soap, a) soap_default_double(soap, a)


#define soap_xsd__double2s soap_double2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap*, const char*, int, const double *, const char*);

#define soap_s2xsd__double soap_s2double

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_xsd__double(struct soap*, const char*, double *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_xsd__double
#define soap_write_xsd__double(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_xsd__double(soap, data, "xsd:double", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_xsd__double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_xsd__double
#define soap_read_xsd__double(soap, data) ( ((data) ? (soap_default_xsd__double(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xsd__double(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_double
#define SOAP_TYPE_double (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_double(soap, data, "double", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( ((data) ? (soap_default_double(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_double(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_dateTime
#define SOAP_TYPE_dateTime (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_dateTime(struct soap*, time_t *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

#ifndef soap_write_dateTime
#define soap_write_dateTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_dateTime(soap, data, "dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

#ifndef soap_read_dateTime
#define soap_read_dateTime(soap, data) ( ((data) ? (soap_default_dateTime(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_dateTime(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (19)
#endif

#define soap_default_xsd__boolean(soap, a) soap_default_bool(soap, a)


#define soap_xsd__boolean2s soap_bool2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap*, const char*, int, const bool *, const char*);

#define soap_s2xsd__boolean soap_s2bool

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_xsd__boolean(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__boolean(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_xsd__boolean
#define soap_write_xsd__boolean(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_xsd__boolean(soap, data, "xsd:boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_xsd__boolean(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_xsd__boolean
#define soap_read_xsd__boolean(soap, data) ( ((data) ? (soap_default_xsd__boolean(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xsd__boolean(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( ((data) ? (soap_default_bool(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_bool(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__SensorName
#define SOAP_TYPE_ns__SensorName (14)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SensorName(struct soap*, enum ns__SensorName *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SensorName(struct soap*, const char*, int, const enum ns__SensorName *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__SensorName2s(struct soap*, enum ns__SensorName);
SOAP_FMAC3 enum ns__SensorName * SOAP_FMAC4 soap_in_ns__SensorName(struct soap*, const char*, enum ns__SensorName *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__SensorName(struct soap*, const char*, enum ns__SensorName *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SensorName(struct soap*, const enum ns__SensorName *, const char*, const char*);

#ifndef soap_write_ns__SensorName
#define soap_write_ns__SensorName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_ns__SensorName(soap, data, "ns:SensorName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns__SensorName * SOAP_FMAC4 soap_get_ns__SensorName(struct soap*, enum ns__SensorName *, const char*, const char*);

#ifndef soap_read_ns__SensorName
#define soap_read_ns__SensorName(soap, data) ( ((data) ? (soap_default_ns__SensorName(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__SensorName(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__SensorType
#define SOAP_TYPE_ns__SensorType (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SensorType(struct soap*, enum ns__SensorType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SensorType(struct soap*, const char*, int, const enum ns__SensorType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__SensorType2s(struct soap*, enum ns__SensorType);
SOAP_FMAC3 enum ns__SensorType * SOAP_FMAC4 soap_in_ns__SensorType(struct soap*, const char*, enum ns__SensorType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__SensorType(struct soap*, const char*, enum ns__SensorType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SensorType(struct soap*, const enum ns__SensorType *, const char*, const char*);

#ifndef soap_write_ns__SensorType
#define soap_write_ns__SensorType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_ns__SensorType(soap, data, "ns:SensorType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns__SensorType * SOAP_FMAC4 soap_get_ns__SensorType(struct soap*, enum ns__SensorType *, const char*, const char*);

#ifndef soap_read_ns__SensorType
#define soap_read_ns__SensorType(soap, data) ( ((data) ? (soap_default_ns__SensorType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__SensorType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__SimcardType
#define SOAP_TYPE_ns__SimcardType (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SimcardType(struct soap*, enum ns__SimcardType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SimcardType(struct soap*, const char*, int, const enum ns__SimcardType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__SimcardType2s(struct soap*, enum ns__SimcardType);
SOAP_FMAC3 enum ns__SimcardType * SOAP_FMAC4 soap_in_ns__SimcardType(struct soap*, const char*, enum ns__SimcardType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__SimcardType(struct soap*, const char*, enum ns__SimcardType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SimcardType(struct soap*, const enum ns__SimcardType *, const char*, const char*);

#ifndef soap_write_ns__SimcardType
#define soap_write_ns__SimcardType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_ns__SimcardType(soap, data, "ns:SimcardType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns__SimcardType * SOAP_FMAC4 soap_get_ns__SimcardType(struct soap*, enum ns__SimcardType *, const char*, const char*);

#ifndef soap_read_ns__SimcardType
#define soap_read_ns__SimcardType(soap, data) ( ((data) ? (soap_default_ns__SimcardType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__SimcardType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__UserType
#define SOAP_TYPE_ns__UserType (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__UserType(struct soap*, enum ns__UserType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__UserType(struct soap*, const char*, int, const enum ns__UserType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__UserType2s(struct soap*, enum ns__UserType);
SOAP_FMAC3 enum ns__UserType * SOAP_FMAC4 soap_in_ns__UserType(struct soap*, const char*, enum ns__UserType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__UserType(struct soap*, const char*, enum ns__UserType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__UserType(struct soap*, const enum ns__UserType *, const char*, const char*);

#ifndef soap_write_ns__UserType
#define soap_write_ns__UserType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_ns__UserType(soap, data, "ns:UserType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns__UserType * SOAP_FMAC4 soap_get_ns__UserType(struct soap*, enum ns__UserType *, const char*, const char*);

#ifndef soap_read_ns__UserType
#define soap_read_ns__UserType(soap, data) ( ((data) ? (soap_default_ns__UserType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__UserType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__SettingLevel
#define SOAP_TYPE_ns__SettingLevel (10)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SettingLevel(struct soap*, enum ns__SettingLevel *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SettingLevel(struct soap*, const char*, int, const enum ns__SettingLevel *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__SettingLevel2s(struct soap*, enum ns__SettingLevel);
SOAP_FMAC3 enum ns__SettingLevel * SOAP_FMAC4 soap_in_ns__SettingLevel(struct soap*, const char*, enum ns__SettingLevel *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__SettingLevel(struct soap*, const char*, enum ns__SettingLevel *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SettingLevel(struct soap*, const enum ns__SettingLevel *, const char*, const char*);

#ifndef soap_write_ns__SettingLevel
#define soap_write_ns__SettingLevel(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_ns__SettingLevel(soap, data, "ns:SettingLevel", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns__SettingLevel * SOAP_FMAC4 soap_get_ns__SettingLevel(struct soap*, enum ns__SettingLevel *, const char*, const char*);

#ifndef soap_read_ns__SettingLevel
#define soap_read_ns__SettingLevel(soap, data) ( ((data) ? (soap_default_ns__SettingLevel(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__SettingLevel(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__AllCityLocatoins
#define SOAP_TYPE_ns__AllCityLocatoins (58)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__AllCityLocatoins(struct soap*, const char*, int, const ns__AllCityLocatoins *, const char*);
SOAP_FMAC3 ns__AllCityLocatoins * SOAP_FMAC4 soap_in_ns__AllCityLocatoins(struct soap*, const char*, ns__AllCityLocatoins *, const char*);
SOAP_FMAC1 ns__AllCityLocatoins * SOAP_FMAC2 soap_instantiate_ns__AllCityLocatoins(struct soap*, int, const char*, const char*, size_t*);

inline ns__AllCityLocatoins * soap_new_ns__AllCityLocatoins(struct soap *soap, int n = -1) { return soap_instantiate_ns__AllCityLocatoins(soap, n, NULL, NULL, NULL); }

inline ns__AllCityLocatoins * soap_new_req_ns__AllCityLocatoins(
	struct soap *soap,
	const ns__ErrorCode& allCityLocatoinsError)
{	ns__AllCityLocatoins *_p = soap_new_ns__AllCityLocatoins(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__AllCityLocatoins::allCityLocatoinsError = allCityLocatoinsError;
	}
	return _p;
}

inline ns__AllCityLocatoins * soap_new_set_ns__AllCityLocatoins(
	struct soap *soap,
	const std::vector<ns__CityLocation> & allCityLocatoins,
	const ns__ErrorCode& allCityLocatoinsError)
{	ns__AllCityLocatoins *_p = soap_new_ns__AllCityLocatoins(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__AllCityLocatoins::allCityLocatoins = allCityLocatoins;
		_p->ns__AllCityLocatoins::allCityLocatoinsError = allCityLocatoinsError;
	}
	return _p;
}

#ifndef soap_write_ns__AllCityLocatoins
#define soap_write_ns__AllCityLocatoins(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:AllCityLocatoins", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__AllCityLocatoins * SOAP_FMAC4 soap_get_ns__AllCityLocatoins(struct soap*, ns__AllCityLocatoins *, const char*, const char*);

#ifndef soap_read_ns__AllCityLocatoins
#define soap_read_ns__AllCityLocatoins(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__AllCityLocatoins(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__CityLocation
#define SOAP_TYPE_ns__CityLocation (56)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__CityLocation(struct soap*, const char*, int, const ns__CityLocation *, const char*);
SOAP_FMAC3 ns__CityLocation * SOAP_FMAC4 soap_in_ns__CityLocation(struct soap*, const char*, ns__CityLocation *, const char*);
SOAP_FMAC1 ns__CityLocation * SOAP_FMAC2 soap_instantiate_ns__CityLocation(struct soap*, int, const char*, const char*, size_t*);

inline ns__CityLocation * soap_new_ns__CityLocation(struct soap *soap, int n = -1) { return soap_instantiate_ns__CityLocation(soap, n, NULL, NULL, NULL); }

inline ns__CityLocation * soap_new_req_ns__CityLocation(
	struct soap *soap,
	const ns__ErrorCode& cityLocationError)
{	ns__CityLocation *_p = soap_new_ns__CityLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__CityLocation::cityLocationError = cityLocationError;
	}
	return _p;
}

inline ns__CityLocation * soap_new_set_ns__CityLocation(
	struct soap *soap,
	const std::string& cityLocationCityName,
	const std::vector<std::string> & cityLocationLocationsName,
	const ns__ErrorCode& cityLocationError)
{	ns__CityLocation *_p = soap_new_ns__CityLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__CityLocation::cityLocationCityName = cityLocationCityName;
		_p->ns__CityLocation::cityLocationLocationsName = cityLocationLocationsName;
		_p->ns__CityLocation::cityLocationError = cityLocationError;
	}
	return _p;
}

#ifndef soap_write_ns__CityLocation
#define soap_write_ns__CityLocation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:CityLocation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__CityLocation * SOAP_FMAC4 soap_get_ns__CityLocation(struct soap*, ns__CityLocation *, const char*, const char*);

#ifndef soap_read_ns__CityLocation
#define soap_read_ns__CityLocation(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__CityLocation(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ServerOptions
#define SOAP_TYPE_ns__ServerOptions (55)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ServerOptions(struct soap*, const char*, int, const ns__ServerOptions *, const char*);
SOAP_FMAC3 ns__ServerOptions * SOAP_FMAC4 soap_in_ns__ServerOptions(struct soap*, const char*, ns__ServerOptions *, const char*);
SOAP_FMAC1 ns__ServerOptions * SOAP_FMAC2 soap_instantiate_ns__ServerOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns__ServerOptions * soap_new_ns__ServerOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns__ServerOptions(soap, n, NULL, NULL, NULL); }

inline ns__ServerOptions * soap_new_req_ns__ServerOptions(
	struct soap *soap,
	const ns__DataBaseInfo& serverOptionsDataBaseInfo,
	const ns__ErrorCode& serverOptionsError)
{	ns__ServerOptions *_p = soap_new_ns__ServerOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__ServerOptions::serverOptionsDataBaseInfo = serverOptionsDataBaseInfo;
		_p->ns__ServerOptions::serverOptionsError = serverOptionsError;
	}
	return _p;
}

inline ns__ServerOptions * soap_new_set_ns__ServerOptions(
	struct soap *soap,
	const ns__DataBaseInfo& serverOptionsDataBaseInfo,
	int serverOptionsTimeRepeat,
	const ns__ErrorCode& serverOptionsError)
{	ns__ServerOptions *_p = soap_new_ns__ServerOptions(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__ServerOptions::serverOptionsDataBaseInfo = serverOptionsDataBaseInfo;
		_p->ns__ServerOptions::serverOptionsTimeRepeat = serverOptionsTimeRepeat;
		_p->ns__ServerOptions::serverOptionsError = serverOptionsError;
	}
	return _p;
}

#ifndef soap_write_ns__ServerOptions
#define soap_write_ns__ServerOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:ServerOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__ServerOptions * SOAP_FMAC4 soap_get_ns__ServerOptions(struct soap*, ns__ServerOptions *, const char*, const char*);

#ifndef soap_read_ns__ServerOptions
#define soap_read_ns__ServerOptions(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__ServerOptions(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__DataBaseInfo
#define SOAP_TYPE_ns__DataBaseInfo (54)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DataBaseInfo(struct soap*, const char*, int, const ns__DataBaseInfo *, const char*);
SOAP_FMAC3 ns__DataBaseInfo * SOAP_FMAC4 soap_in_ns__DataBaseInfo(struct soap*, const char*, ns__DataBaseInfo *, const char*);
SOAP_FMAC1 ns__DataBaseInfo * SOAP_FMAC2 soap_instantiate_ns__DataBaseInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns__DataBaseInfo * soap_new_ns__DataBaseInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns__DataBaseInfo(soap, n, NULL, NULL, NULL); }

inline ns__DataBaseInfo * soap_new_req_ns__DataBaseInfo(
	struct soap *soap,
	const ns__ErrorCode& dataBaseInfoError)
{	ns__DataBaseInfo *_p = soap_new_ns__DataBaseInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__DataBaseInfo::dataBaseInfoError = dataBaseInfoError;
	}
	return _p;
}

inline ns__DataBaseInfo * soap_new_set_ns__DataBaseInfo(
	struct soap *soap,
	const std::string& dataBaseInfoServerName,
	int dataBaseInfoPort,
	const std::string& dataBaseInfoUserName,
	const std::string& dataBaseInfoPassWord,
	const ns__ErrorCode& dataBaseInfoError)
{	ns__DataBaseInfo *_p = soap_new_ns__DataBaseInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__DataBaseInfo::dataBaseInfoServerName = dataBaseInfoServerName;
		_p->ns__DataBaseInfo::dataBaseInfoPort = dataBaseInfoPort;
		_p->ns__DataBaseInfo::dataBaseInfoUserName = dataBaseInfoUserName;
		_p->ns__DataBaseInfo::dataBaseInfoPassWord = dataBaseInfoPassWord;
		_p->ns__DataBaseInfo::dataBaseInfoError = dataBaseInfoError;
	}
	return _p;
}

#ifndef soap_write_ns__DataBaseInfo
#define soap_write_ns__DataBaseInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:DataBaseInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__DataBaseInfo * SOAP_FMAC4 soap_get_ns__DataBaseInfo(struct soap*, ns__DataBaseInfo *, const char*, const char*);

#ifndef soap_read_ns__DataBaseInfo
#define soap_read_ns__DataBaseInfo(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__DataBaseInfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__UserDevice
#define SOAP_TYPE_ns__UserDevice (53)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__UserDevice(struct soap*, const char*, int, const ns__UserDevice *, const char*);
SOAP_FMAC3 ns__UserDevice * SOAP_FMAC4 soap_in_ns__UserDevice(struct soap*, const char*, ns__UserDevice *, const char*);
SOAP_FMAC1 ns__UserDevice * SOAP_FMAC2 soap_instantiate_ns__UserDevice(struct soap*, int, const char*, const char*, size_t*);

inline ns__UserDevice * soap_new_ns__UserDevice(struct soap *soap, int n = -1) { return soap_instantiate_ns__UserDevice(soap, n, NULL, NULL, NULL); }

inline ns__UserDevice * soap_new_req_ns__UserDevice(
	struct soap *soap,
	const ns__User& userDeviceUser,
	const ns__UserDevices& userDeviceDevices,
	const ns__ErrorCode& userDeviceError)
{	ns__UserDevice *_p = soap_new_ns__UserDevice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__UserDevice::userDeviceUser = userDeviceUser;
		_p->ns__UserDevice::userDeviceDevices = userDeviceDevices;
		_p->ns__UserDevice::userDeviceError = userDeviceError;
	}
	return _p;
}

inline ns__UserDevice * soap_new_set_ns__UserDevice(
	struct soap *soap,
	const ns__User& userDeviceUser,
	const ns__UserDevices& userDeviceDevices,
	const ns__ErrorCode& userDeviceError)
{	ns__UserDevice *_p = soap_new_ns__UserDevice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__UserDevice::userDeviceUser = userDeviceUser;
		_p->ns__UserDevice::userDeviceDevices = userDeviceDevices;
		_p->ns__UserDevice::userDeviceError = userDeviceError;
	}
	return _p;
}

#ifndef soap_write_ns__UserDevice
#define soap_write_ns__UserDevice(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:UserDevice", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__UserDevice * SOAP_FMAC4 soap_get_ns__UserDevice(struct soap*, ns__UserDevice *, const char*, const char*);

#ifndef soap_read_ns__UserDevice
#define soap_read_ns__UserDevice(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__UserDevice(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__UserDevices
#define SOAP_TYPE_ns__UserDevices (51)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__UserDevices(struct soap*, const char*, int, const ns__UserDevices *, const char*);
SOAP_FMAC3 ns__UserDevices * SOAP_FMAC4 soap_in_ns__UserDevices(struct soap*, const char*, ns__UserDevices *, const char*);
SOAP_FMAC1 ns__UserDevices * SOAP_FMAC2 soap_instantiate_ns__UserDevices(struct soap*, int, const char*, const char*, size_t*);

inline ns__UserDevices * soap_new_ns__UserDevices(struct soap *soap, int n = -1) { return soap_instantiate_ns__UserDevices(soap, n, NULL, NULL, NULL); }

inline ns__UserDevices * soap_new_req_ns__UserDevices(
	struct soap *soap,
	const ns__ErrorCode& userDeviceError)
{	ns__UserDevices *_p = soap_new_ns__UserDevices(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__UserDevices::userDeviceError = userDeviceError;
	}
	return _p;
}

inline ns__UserDevices * soap_new_set_ns__UserDevices(
	struct soap *soap,
	const std::vector<ns__DeviceRules> & userDevices,
	const ns__ErrorCode& userDeviceError)
{	ns__UserDevices *_p = soap_new_ns__UserDevices(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__UserDevices::userDevices = userDevices;
		_p->ns__UserDevices::userDeviceError = userDeviceError;
	}
	return _p;
}

#ifndef soap_write_ns__UserDevices
#define soap_write_ns__UserDevices(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:UserDevices", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__UserDevices * SOAP_FMAC4 soap_get_ns__UserDevices(struct soap*, ns__UserDevices *, const char*, const char*);

#ifndef soap_read_ns__UserDevices
#define soap_read_ns__UserDevices(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__UserDevices(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__DeviceRules
#define SOAP_TYPE_ns__DeviceRules (50)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DeviceRules(struct soap*, const char*, int, const ns__DeviceRules *, const char*);
SOAP_FMAC3 ns__DeviceRules * SOAP_FMAC4 soap_in_ns__DeviceRules(struct soap*, const char*, ns__DeviceRules *, const char*);
SOAP_FMAC1 ns__DeviceRules * SOAP_FMAC2 soap_instantiate_ns__DeviceRules(struct soap*, int, const char*, const char*, size_t*);

inline ns__DeviceRules * soap_new_ns__DeviceRules(struct soap *soap, int n = -1) { return soap_instantiate_ns__DeviceRules(soap, n, NULL, NULL, NULL); }

inline ns__DeviceRules * soap_new_req_ns__DeviceRules(
	struct soap *soap,
	const ns__Device& userDeviceDevice)
{	ns__DeviceRules *_p = soap_new_ns__DeviceRules(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__DeviceRules::userDeviceDevice = userDeviceDevice;
	}
	return _p;
}

inline ns__DeviceRules * soap_new_set_ns__DeviceRules(
	struct soap *soap,
	const ns__Device& userDeviceDevice,
	bool userDeviceView,
	bool userDeviceUpdate,
	bool userDeviceDelete)
{	ns__DeviceRules *_p = soap_new_ns__DeviceRules(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__DeviceRules::userDeviceDevice = userDeviceDevice;
		_p->ns__DeviceRules::userDeviceView = userDeviceView;
		_p->ns__DeviceRules::userDeviceUpdate = userDeviceUpdate;
		_p->ns__DeviceRules::userDeviceDelete = userDeviceDelete;
	}
	return _p;
}

#ifndef soap_write_ns__DeviceRules
#define soap_write_ns__DeviceRules(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:DeviceRules", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__DeviceRules * SOAP_FMAC4 soap_get_ns__DeviceRules(struct soap*, ns__DeviceRules *, const char*, const char*);

#ifndef soap_read_ns__DeviceRules
#define soap_read_ns__DeviceRules(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__DeviceRules(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ErrorLog
#define SOAP_TYPE_ns__ErrorLog (49)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ErrorLog(struct soap*, const char*, int, const ns__ErrorLog *, const char*);
SOAP_FMAC3 ns__ErrorLog * SOAP_FMAC4 soap_in_ns__ErrorLog(struct soap*, const char*, ns__ErrorLog *, const char*);
SOAP_FMAC1 ns__ErrorLog * SOAP_FMAC2 soap_instantiate_ns__ErrorLog(struct soap*, int, const char*, const char*, size_t*);

inline ns__ErrorLog * soap_new_ns__ErrorLog(struct soap *soap, int n = -1) { return soap_instantiate_ns__ErrorLog(soap, n, NULL, NULL, NULL); }

inline ns__ErrorLog * soap_new_req_ns__ErrorLog(
	struct soap *soap,
	const struct tm& errorLogDateTime,
	const ns__Device& errorLogDevice,
	const ns__ErrorCode& errorLogError)
{	ns__ErrorLog *_p = soap_new_ns__ErrorLog(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__ErrorLog::errorLogDateTime = errorLogDateTime;
		_p->ns__ErrorLog::errorLogDevice = errorLogDevice;
		_p->ns__ErrorLog::errorLogError = errorLogError;
	}
	return _p;
}

inline ns__ErrorLog * soap_new_set_ns__ErrorLog(
	struct soap *soap,
	const struct tm& errorLogDateTime,
	const ns__Device& errorLogDevice,
	const std::string& errorLogType,
	const ns__ErrorCode& errorLogError)
{	ns__ErrorLog *_p = soap_new_ns__ErrorLog(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__ErrorLog::errorLogDateTime = errorLogDateTime;
		_p->ns__ErrorLog::errorLogDevice = errorLogDevice;
		_p->ns__ErrorLog::errorLogType = errorLogType;
		_p->ns__ErrorLog::errorLogError = errorLogError;
	}
	return _p;
}

#ifndef soap_write_ns__ErrorLog
#define soap_write_ns__ErrorLog(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:ErrorLog", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__ErrorLog * SOAP_FMAC4 soap_get_ns__ErrorLog(struct soap*, ns__ErrorLog *, const char*, const char*);

#ifndef soap_read_ns__ErrorLog
#define soap_read_ns__ErrorLog(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__ErrorLog(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__DeviceStatusInfo
#define SOAP_TYPE_ns__DeviceStatusInfo (46)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DeviceStatusInfo(struct soap*, const char*, int, const ns__DeviceStatusInfo *, const char*);
SOAP_FMAC3 ns__DeviceStatusInfo * SOAP_FMAC4 soap_in_ns__DeviceStatusInfo(struct soap*, const char*, ns__DeviceStatusInfo *, const char*);
SOAP_FMAC1 ns__DeviceStatusInfo * SOAP_FMAC2 soap_instantiate_ns__DeviceStatusInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns__DeviceStatusInfo * soap_new_ns__DeviceStatusInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns__DeviceStatusInfo(soap, n, NULL, NULL, NULL); }

inline ns__DeviceStatusInfo * soap_new_req_ns__DeviceStatusInfo(
	struct soap *soap,
	const ns__Report& deviceStatusInfoStartEndDateTime)
{	ns__DeviceStatusInfo *_p = soap_new_ns__DeviceStatusInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__DeviceStatusInfo::deviceStatusInfoStartEndDateTime = deviceStatusInfoStartEndDateTime;
	}
	return _p;
}

inline ns__DeviceStatusInfo * soap_new_set_ns__DeviceStatusInfo(
	struct soap *soap,
	const ns__Report& deviceStatusInfoStartEndDateTime,
	const std::vector<ns__Device> & deviceStatusInfoDevice,
	const std::vector<std::string> & deviceStatusInfoErrorType)
{	ns__DeviceStatusInfo *_p = soap_new_ns__DeviceStatusInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__DeviceStatusInfo::deviceStatusInfoStartEndDateTime = deviceStatusInfoStartEndDateTime;
		_p->ns__DeviceStatusInfo::deviceStatusInfoDevice = deviceStatusInfoDevice;
		_p->ns__DeviceStatusInfo::deviceStatusInfoErrorType = deviceStatusInfoErrorType;
	}
	return _p;
}

#ifndef soap_write_ns__DeviceStatusInfo
#define soap_write_ns__DeviceStatusInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:DeviceStatusInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__DeviceStatusInfo * SOAP_FMAC4 soap_get_ns__DeviceStatusInfo(struct soap*, ns__DeviceStatusInfo *, const char*, const char*);

#ifndef soap_read_ns__DeviceStatusInfo
#define soap_read_ns__DeviceStatusInfo(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__DeviceStatusInfo(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__DeviceStatusLogList
#define SOAP_TYPE_ns__DeviceStatusLogList (44)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DeviceStatusLogList(struct soap*, const char*, int, const ns__DeviceStatusLogList *, const char*);
SOAP_FMAC3 ns__DeviceStatusLogList * SOAP_FMAC4 soap_in_ns__DeviceStatusLogList(struct soap*, const char*, ns__DeviceStatusLogList *, const char*);
SOAP_FMAC1 ns__DeviceStatusLogList * SOAP_FMAC2 soap_instantiate_ns__DeviceStatusLogList(struct soap*, int, const char*, const char*, size_t*);

inline ns__DeviceStatusLogList * soap_new_ns__DeviceStatusLogList(struct soap *soap, int n = -1) { return soap_instantiate_ns__DeviceStatusLogList(soap, n, NULL, NULL, NULL); }

inline ns__DeviceStatusLogList * soap_new_req_ns__DeviceStatusLogList(
	struct soap *soap,
	const ns__ErrorCode& statusLogListError)
{	ns__DeviceStatusLogList *_p = soap_new_ns__DeviceStatusLogList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__DeviceStatusLogList::statusLogListError = statusLogListError;
	}
	return _p;
}

inline ns__DeviceStatusLogList * soap_new_set_ns__DeviceStatusLogList(
	struct soap *soap,
	const std::vector<ns__DeviceStatusLog> & statusLogListStatus,
	const ns__ErrorCode& statusLogListError)
{	ns__DeviceStatusLogList *_p = soap_new_ns__DeviceStatusLogList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__DeviceStatusLogList::statusLogListStatus = statusLogListStatus;
		_p->ns__DeviceStatusLogList::statusLogListError = statusLogListError;
	}
	return _p;
}

#ifndef soap_write_ns__DeviceStatusLogList
#define soap_write_ns__DeviceStatusLogList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:DeviceStatusLogList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__DeviceStatusLogList * SOAP_FMAC4 soap_get_ns__DeviceStatusLogList(struct soap*, ns__DeviceStatusLogList *, const char*, const char*);

#ifndef soap_read_ns__DeviceStatusLogList
#define soap_read_ns__DeviceStatusLogList(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__DeviceStatusLogList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__DeviceStatusLog
#define SOAP_TYPE_ns__DeviceStatusLog (43)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DeviceStatusLog(struct soap*, const char*, int, const ns__DeviceStatusLog *, const char*);
SOAP_FMAC3 ns__DeviceStatusLog * SOAP_FMAC4 soap_in_ns__DeviceStatusLog(struct soap*, const char*, ns__DeviceStatusLog *, const char*);
SOAP_FMAC1 ns__DeviceStatusLog * SOAP_FMAC2 soap_instantiate_ns__DeviceStatusLog(struct soap*, int, const char*, const char*, size_t*);

inline ns__DeviceStatusLog * soap_new_ns__DeviceStatusLog(struct soap *soap, int n = -1) { return soap_instantiate_ns__DeviceStatusLog(soap, n, NULL, NULL, NULL); }

inline ns__DeviceStatusLog * soap_new_req_ns__DeviceStatusLog(
	struct soap *soap,
	const ns__Report& statusLogStartEndDateTime,
	const ns__Device& statusLogDevice,
	const ns__ErrorCode& statusLogError)
{	ns__DeviceStatusLog *_p = soap_new_ns__DeviceStatusLog(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__DeviceStatusLog::statusLogStartEndDateTime = statusLogStartEndDateTime;
		_p->ns__DeviceStatusLog::statusLogDevice = statusLogDevice;
		_p->ns__DeviceStatusLog::statusLogError = statusLogError;
	}
	return _p;
}

inline ns__DeviceStatusLog * soap_new_set_ns__DeviceStatusLog(
	struct soap *soap,
	const ns__Report& statusLogStartEndDateTime,
	const ns__Device& statusLogDevice,
	const ns__ErrorCode& statusLogError)
{	ns__DeviceStatusLog *_p = soap_new_ns__DeviceStatusLog(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__DeviceStatusLog::statusLogStartEndDateTime = statusLogStartEndDateTime;
		_p->ns__DeviceStatusLog::statusLogDevice = statusLogDevice;
		_p->ns__DeviceStatusLog::statusLogError = statusLogError;
	}
	return _p;
}

#ifndef soap_write_ns__DeviceStatusLog
#define soap_write_ns__DeviceStatusLog(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:DeviceStatusLog", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__DeviceStatusLog * SOAP_FMAC4 soap_get_ns__DeviceStatusLog(struct soap*, ns__DeviceStatusLog *, const char*, const char*);

#ifndef soap_read_ns__DeviceStatusLog
#define soap_read_ns__DeviceStatusLog(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__DeviceStatusLog(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__UserLog
#define SOAP_TYPE_ns__UserLog (42)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__UserLog(struct soap*, const char*, int, const ns__UserLog *, const char*);
SOAP_FMAC3 ns__UserLog * SOAP_FMAC4 soap_in_ns__UserLog(struct soap*, const char*, ns__UserLog *, const char*);
SOAP_FMAC1 ns__UserLog * SOAP_FMAC2 soap_instantiate_ns__UserLog(struct soap*, int, const char*, const char*, size_t*);

inline ns__UserLog * soap_new_ns__UserLog(struct soap *soap, int n = -1) { return soap_instantiate_ns__UserLog(soap, n, NULL, NULL, NULL); }

inline ns__UserLog * soap_new_req_ns__UserLog(
	struct soap *soap,
	const ns__Report& userLogStartEndDateTime,
	const ns__User& userLogUser,
	const ns__ErrorCode& userLogError)
{	ns__UserLog *_p = soap_new_ns__UserLog(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__UserLog::userLogStartEndDateTime = userLogStartEndDateTime;
		_p->ns__UserLog::userLogUser = userLogUser;
		_p->ns__UserLog::userLogError = userLogError;
	}
	return _p;
}

inline ns__UserLog * soap_new_set_ns__UserLog(
	struct soap *soap,
	const ns__Report& userLogStartEndDateTime,
	const std::string& userLogData,
	const ns__User& userLogUser,
	const ns__ErrorCode& userLogError)
{	ns__UserLog *_p = soap_new_ns__UserLog(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__UserLog::userLogStartEndDateTime = userLogStartEndDateTime;
		_p->ns__UserLog::userLogData = userLogData;
		_p->ns__UserLog::userLogUser = userLogUser;
		_p->ns__UserLog::userLogError = userLogError;
	}
	return _p;
}

#ifndef soap_write_ns__UserLog
#define soap_write_ns__UserLog(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:UserLog", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__UserLog * SOAP_FMAC4 soap_get_ns__UserLog(struct soap*, ns__UserLog *, const char*, const char*);

#ifndef soap_read_ns__UserLog
#define soap_read_ns__UserLog(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__UserLog(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ActivityLog
#define SOAP_TYPE_ns__ActivityLog (41)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ActivityLog(struct soap*, const char*, int, const ns__ActivityLog *, const char*);
SOAP_FMAC3 ns__ActivityLog * SOAP_FMAC4 soap_in_ns__ActivityLog(struct soap*, const char*, ns__ActivityLog *, const char*);
SOAP_FMAC1 ns__ActivityLog * SOAP_FMAC2 soap_instantiate_ns__ActivityLog(struct soap*, int, const char*, const char*, size_t*);

inline ns__ActivityLog * soap_new_ns__ActivityLog(struct soap *soap, int n = -1) { return soap_instantiate_ns__ActivityLog(soap, n, NULL, NULL, NULL); }

inline ns__ActivityLog * soap_new_req_ns__ActivityLog(
	struct soap *soap,
	const ns__Report& activityLogStartEndDateTime,
	const ns__Device& activityLogDevice,
	const ns__User& activityLogUser,
	const ns__ErrorCode& activityError)
{	ns__ActivityLog *_p = soap_new_ns__ActivityLog(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__ActivityLog::activityLogStartEndDateTime = activityLogStartEndDateTime;
		_p->ns__ActivityLog::activityLogDevice = activityLogDevice;
		_p->ns__ActivityLog::activityLogUser = activityLogUser;
		_p->ns__ActivityLog::activityError = activityError;
	}
	return _p;
}

inline ns__ActivityLog * soap_new_set_ns__ActivityLog(
	struct soap *soap,
	const ns__Report& activityLogStartEndDateTime,
	const std::string& activityLogData,
	const ns__Device& activityLogDevice,
	const ns__User& activityLogUser,
	const ns__ErrorCode& activityError)
{	ns__ActivityLog *_p = soap_new_ns__ActivityLog(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__ActivityLog::activityLogStartEndDateTime = activityLogStartEndDateTime;
		_p->ns__ActivityLog::activityLogData = activityLogData;
		_p->ns__ActivityLog::activityLogDevice = activityLogDevice;
		_p->ns__ActivityLog::activityLogUser = activityLogUser;
		_p->ns__ActivityLog::activityError = activityError;
	}
	return _p;
}

#ifndef soap_write_ns__ActivityLog
#define soap_write_ns__ActivityLog(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:ActivityLog", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__ActivityLog * SOAP_FMAC4 soap_get_ns__ActivityLog(struct soap*, ns__ActivityLog *, const char*, const char*);

#ifndef soap_read_ns__ActivityLog
#define soap_read_ns__ActivityLog(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__ActivityLog(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__Report
#define SOAP_TYPE_ns__Report (40)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Report(struct soap*, const char*, int, const ns__Report *, const char*);
SOAP_FMAC3 ns__Report * SOAP_FMAC4 soap_in_ns__Report(struct soap*, const char*, ns__Report *, const char*);
SOAP_FMAC1 ns__Report * SOAP_FMAC2 soap_instantiate_ns__Report(struct soap*, int, const char*, const char*, size_t*);

inline ns__Report * soap_new_ns__Report(struct soap *soap, int n = -1) { return soap_instantiate_ns__Report(soap, n, NULL, NULL, NULL); }

inline ns__Report * soap_new_req_ns__Report(
	struct soap *soap,
	const struct tm& reportStartDate,
	const struct tm& reportEndDate)
{	ns__Report *_p = soap_new_ns__Report(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__Report::reportStartDate = reportStartDate;
		_p->ns__Report::reportEndDate = reportEndDate;
	}
	return _p;
}

inline ns__Report * soap_new_set_ns__Report(
	struct soap *soap,
	const struct tm& reportStartDate,
	const struct tm& reportEndDate)
{	ns__Report *_p = soap_new_ns__Report(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__Report::reportStartDate = reportStartDate;
		_p->ns__Report::reportEndDate = reportEndDate;
	}
	return _p;
}

#ifndef soap_write_ns__Report
#define soap_write_ns__Report(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:Report", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__Report * SOAP_FMAC4 soap_get_ns__Report(struct soap*, ns__Report *, const char*, const char*);

#ifndef soap_read_ns__Report
#define soap_read_ns__Report(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__Report(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__Device
#define SOAP_TYPE_ns__Device (37)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Device(struct soap*, const char*, int, const ns__Device *, const char*);
SOAP_FMAC3 ns__Device * SOAP_FMAC4 soap_in_ns__Device(struct soap*, const char*, ns__Device *, const char*);
SOAP_FMAC1 ns__Device * SOAP_FMAC2 soap_instantiate_ns__Device(struct soap*, int, const char*, const char*, size_t*);

inline ns__Device * soap_new_ns__Device(struct soap *soap, int n = -1) { return soap_instantiate_ns__Device(soap, n, NULL, NULL, NULL); }

inline ns__Device * soap_new_req_ns__Device(
	struct soap *soap,
	const std::string& deviceDNSAddress,
	const ns__IP& deviceIP,
	const struct tm& deviceDateTime,
	const ns__Mobile& deviceMobileInfo,
	const ns__Server& deviceServerInfo,
	const ns__Gprs& deviceGprsInfo,
	const ns__ErrorCode& deviceError)
{	ns__Device *_p = soap_new_ns__Device(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__Device::deviceDNSAddress = deviceDNSAddress;
		_p->ns__Device::deviceIP = deviceIP;
		_p->ns__Device::deviceDateTime = deviceDateTime;
		_p->ns__Device::deviceMobileInfo = deviceMobileInfo;
		_p->ns__Device::deviceServerInfo = deviceServerInfo;
		_p->ns__Device::deviceGprsInfo = deviceGprsInfo;
		_p->ns__Device::deviceError = deviceError;
	}
	return _p;
}

inline ns__Device * soap_new_set_ns__Device(
	struct soap *soap,
	int deviceSerialNumber,
	const std::string& deviceName,
	const std::string& deviceFirmWareVersion,
	const std::string& deviceNikeName,
	const std::string& deviceLocation,
	const std::string& deviceCity,
	int deviceSocket,
	const std::string& deviceDNSAddress,
	const ns__IP& deviceIP,
	int devicePort,
	const struct tm& deviceDateTime,
	const ns__Mobile& deviceMobileInfo,
	const ns__Server& deviceServerInfo,
	const ns__Gprs& deviceGprsInfo,
	const std::vector<LONG64> & deviceSMSContact,
	const std::vector<LONG64> & deviceSMSConfig,
	const std::string& deviceFlags,
	bool deviceSMSCommand,
	bool deviceGSMCommand,
	bool deviceKeyBoardCommand,
	bool deviceBuzzerOnOff,
	bool deviceReset,
	const std::vector<ns__Sensor> & deviceSensors,
	const ns__ErrorCode& deviceError)
{	ns__Device *_p = soap_new_ns__Device(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__Device::deviceSerialNumber = deviceSerialNumber;
		_p->ns__Device::deviceName = deviceName;
		_p->ns__Device::deviceFirmWareVersion = deviceFirmWareVersion;
		_p->ns__Device::deviceNikeName = deviceNikeName;
		_p->ns__Device::deviceLocation = deviceLocation;
		_p->ns__Device::deviceCity = deviceCity;
		_p->ns__Device::deviceSocket = deviceSocket;
		_p->ns__Device::deviceDNSAddress = deviceDNSAddress;
		_p->ns__Device::deviceIP = deviceIP;
		_p->ns__Device::devicePort = devicePort;
		_p->ns__Device::deviceDateTime = deviceDateTime;
		_p->ns__Device::deviceMobileInfo = deviceMobileInfo;
		_p->ns__Device::deviceServerInfo = deviceServerInfo;
		_p->ns__Device::deviceGprsInfo = deviceGprsInfo;
		_p->ns__Device::deviceSMSContact = deviceSMSContact;
		_p->ns__Device::deviceSMSConfig = deviceSMSConfig;
		_p->ns__Device::deviceFlags = deviceFlags;
		_p->ns__Device::deviceSMSCommand = deviceSMSCommand;
		_p->ns__Device::deviceGSMCommand = deviceGSMCommand;
		_p->ns__Device::deviceKeyBoardCommand = deviceKeyBoardCommand;
		_p->ns__Device::deviceBuzzerOnOff = deviceBuzzerOnOff;
		_p->ns__Device::deviceReset = deviceReset;
		_p->ns__Device::deviceSensors = deviceSensors;
		_p->ns__Device::deviceError = deviceError;
	}
	return _p;
}

#ifndef soap_write_ns__Device
#define soap_write_ns__Device(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:Device", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__Device * SOAP_FMAC4 soap_get_ns__Device(struct soap*, ns__Device *, const char*, const char*);

#ifndef soap_read_ns__Device
#define soap_read_ns__Device(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__Device(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__Sensor
#define SOAP_TYPE_ns__Sensor (35)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Sensor(struct soap*, const char*, int, const ns__Sensor *, const char*);
SOAP_FMAC3 ns__Sensor * SOAP_FMAC4 soap_in_ns__Sensor(struct soap*, const char*, ns__Sensor *, const char*);
SOAP_FMAC1 ns__Sensor * SOAP_FMAC2 soap_instantiate_ns__Sensor(struct soap*, int, const char*, const char*, size_t*);

inline ns__Sensor * soap_new_ns__Sensor(struct soap *soap, int n = -1) { return soap_instantiate_ns__Sensor(soap, n, NULL, NULL, NULL); }

inline ns__Sensor * soap_new_req_ns__Sensor(
	struct soap *soap,
	const ns__Relay& sensorRelay,
	const ns__ErrorCode& sensorError)
{	ns__Sensor *_p = soap_new_ns__Sensor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__Sensor::sensorRelay = sensorRelay;
		_p->ns__Sensor::sensorError = sensorError;
	}
	return _p;
}

inline ns__Sensor * soap_new_set_ns__Sensor(
	struct soap *soap,
	enum ns__SensorName sensorName,
	const std::string& sensorNikeName,
	double sensorValue,
	int sensorCalibration,
	int sensorMinimumValue,
	int sensorMaximumValue,
	int sensorMaximumThreshold,
	int sensorMinimumThreshold,
	bool sensorSMSOnOff,
	bool sensorBuzzerOnOff,
	const ns__Relay& sensorRelay,
	bool sensorLEDFlag,
	enum ns__SensorType sensorType,
	const ns__ErrorCode& sensorError)
{	ns__Sensor *_p = soap_new_ns__Sensor(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__Sensor::sensorName = sensorName;
		_p->ns__Sensor::sensorNikeName = sensorNikeName;
		_p->ns__Sensor::sensorValue = sensorValue;
		_p->ns__Sensor::sensorCalibration = sensorCalibration;
		_p->ns__Sensor::sensorMinimumValue = sensorMinimumValue;
		_p->ns__Sensor::sensorMaximumValue = sensorMaximumValue;
		_p->ns__Sensor::sensorMaximumThreshold = sensorMaximumThreshold;
		_p->ns__Sensor::sensorMinimumThreshold = sensorMinimumThreshold;
		_p->ns__Sensor::sensorSMSOnOff = sensorSMSOnOff;
		_p->ns__Sensor::sensorBuzzerOnOff = sensorBuzzerOnOff;
		_p->ns__Sensor::sensorRelay = sensorRelay;
		_p->ns__Sensor::sensorLEDFlag = sensorLEDFlag;
		_p->ns__Sensor::sensorType = sensorType;
		_p->ns__Sensor::sensorError = sensorError;
	}
	return _p;
}

#ifndef soap_write_ns__Sensor
#define soap_write_ns__Sensor(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:Sensor", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__Sensor * SOAP_FMAC4 soap_get_ns__Sensor(struct soap*, ns__Sensor *, const char*, const char*);

#ifndef soap_read_ns__Sensor
#define soap_read_ns__Sensor(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__Sensor(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__Relay
#define SOAP_TYPE_ns__Relay (34)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Relay(struct soap*, const char*, int, const ns__Relay *, const char*);
SOAP_FMAC3 ns__Relay * SOAP_FMAC4 soap_in_ns__Relay(struct soap*, const char*, ns__Relay *, const char*);
SOAP_FMAC1 ns__Relay * SOAP_FMAC2 soap_instantiate_ns__Relay(struct soap*, int, const char*, const char*, size_t*);

inline ns__Relay * soap_new_ns__Relay(struct soap *soap, int n = -1) { return soap_instantiate_ns__Relay(soap, n, NULL, NULL, NULL); }

inline ns__Relay * soap_new_req_ns__Relay(
	struct soap *soap)
{	ns__Relay *_p = soap_new_ns__Relay(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns__Relay * soap_new_set_ns__Relay(
	struct soap *soap,
	int relayIndex,
	bool relayOnOff)
{	ns__Relay *_p = soap_new_ns__Relay(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__Relay::relayIndex = relayIndex;
		_p->ns__Relay::relayOnOff = relayOnOff;
	}
	return _p;
}

#ifndef soap_write_ns__Relay
#define soap_write_ns__Relay(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:Relay", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__Relay * SOAP_FMAC4 soap_get_ns__Relay(struct soap*, ns__Relay *, const char*, const char*);

#ifndef soap_read_ns__Relay
#define soap_read_ns__Relay(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__Relay(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__Mobile
#define SOAP_TYPE_ns__Mobile (33)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Mobile(struct soap*, const char*, int, const ns__Mobile *, const char*);
SOAP_FMAC3 ns__Mobile * SOAP_FMAC4 soap_in_ns__Mobile(struct soap*, const char*, ns__Mobile *, const char*);
SOAP_FMAC1 ns__Mobile * SOAP_FMAC2 soap_instantiate_ns__Mobile(struct soap*, int, const char*, const char*, size_t*);

inline ns__Mobile * soap_new_ns__Mobile(struct soap *soap, int n = -1) { return soap_instantiate_ns__Mobile(soap, n, NULL, NULL, NULL); }

inline ns__Mobile * soap_new_req_ns__Mobile(
	struct soap *soap)
{	ns__Mobile *_p = soap_new_ns__Mobile(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns__Mobile * soap_new_set_ns__Mobile(
	struct soap *soap,
	LONG64 mobileNumber,
	enum ns__SimcardType mobileSimCardType,
	int mobileChargeValue,
	int mobileSignalValue)
{	ns__Mobile *_p = soap_new_ns__Mobile(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__Mobile::mobileNumber = mobileNumber;
		_p->ns__Mobile::mobileSimCardType = mobileSimCardType;
		_p->ns__Mobile::mobileChargeValue = mobileChargeValue;
		_p->ns__Mobile::mobileSignalValue = mobileSignalValue;
	}
	return _p;
}

#ifndef soap_write_ns__Mobile
#define soap_write_ns__Mobile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:Mobile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__Mobile * SOAP_FMAC4 soap_get_ns__Mobile(struct soap*, ns__Mobile *, const char*, const char*);

#ifndef soap_read_ns__Mobile
#define soap_read_ns__Mobile(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__Mobile(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__Gprs
#define SOAP_TYPE_ns__Gprs (32)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Gprs(struct soap*, const char*, int, const ns__Gprs *, const char*);
SOAP_FMAC3 ns__Gprs * SOAP_FMAC4 soap_in_ns__Gprs(struct soap*, const char*, ns__Gprs *, const char*);
SOAP_FMAC1 ns__Gprs * SOAP_FMAC2 soap_instantiate_ns__Gprs(struct soap*, int, const char*, const char*, size_t*);

inline ns__Gprs * soap_new_ns__Gprs(struct soap *soap, int n = -1) { return soap_instantiate_ns__Gprs(soap, n, NULL, NULL, NULL); }

inline ns__Gprs * soap_new_req_ns__Gprs(
	struct soap *soap,
	const std::string& gprsDNSAddress,
	const ns__IP& gprsIP,
	const ns__ErrorCode& gprsError)
{	ns__Gprs *_p = soap_new_ns__Gprs(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__Gprs::gprsDNSAddress = gprsDNSAddress;
		_p->ns__Gprs::gprsIP = gprsIP;
		_p->ns__Gprs::gprsError = gprsError;
	}
	return _p;
}

inline ns__Gprs * soap_new_set_ns__Gprs(
	struct soap *soap,
	const std::string& gprsDNSAddress,
	const ns__IP& gprsIP,
	int gprsPort,
	const ns__ErrorCode& gprsError)
{	ns__Gprs *_p = soap_new_ns__Gprs(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__Gprs::gprsDNSAddress = gprsDNSAddress;
		_p->ns__Gprs::gprsIP = gprsIP;
		_p->ns__Gprs::gprsPort = gprsPort;
		_p->ns__Gprs::gprsError = gprsError;
	}
	return _p;
}

#ifndef soap_write_ns__Gprs
#define soap_write_ns__Gprs(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:Gprs", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__Gprs * SOAP_FMAC4 soap_get_ns__Gprs(struct soap*, ns__Gprs *, const char*, const char*);

#ifndef soap_read_ns__Gprs
#define soap_read_ns__Gprs(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__Gprs(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__Server
#define SOAP_TYPE_ns__Server (31)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Server(struct soap*, const char*, int, const ns__Server *, const char*);
SOAP_FMAC3 ns__Server * SOAP_FMAC4 soap_in_ns__Server(struct soap*, const char*, ns__Server *, const char*);
SOAP_FMAC1 ns__Server * SOAP_FMAC2 soap_instantiate_ns__Server(struct soap*, int, const char*, const char*, size_t*);

inline ns__Server * soap_new_ns__Server(struct soap *soap, int n = -1) { return soap_instantiate_ns__Server(soap, n, NULL, NULL, NULL); }

inline ns__Server * soap_new_req_ns__Server(
	struct soap *soap,
	const std::string& serverDNSAddress,
	const ns__IP& serverIP,
	const ns__ErrorCode& serverError)
{	ns__Server *_p = soap_new_ns__Server(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__Server::serverDNSAddress = serverDNSAddress;
		_p->ns__Server::serverIP = serverIP;
		_p->ns__Server::serverError = serverError;
	}
	return _p;
}

inline ns__Server * soap_new_set_ns__Server(
	struct soap *soap,
	const std::string& serverDNSAddress,
	const ns__IP& serverIP,
	int serverPort,
	const ns__ErrorCode& serverError)
{	ns__Server *_p = soap_new_ns__Server(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__Server::serverDNSAddress = serverDNSAddress;
		_p->ns__Server::serverIP = serverIP;
		_p->ns__Server::serverPort = serverPort;
		_p->ns__Server::serverError = serverError;
	}
	return _p;
}

#ifndef soap_write_ns__Server
#define soap_write_ns__Server(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:Server", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__Server * SOAP_FMAC4 soap_get_ns__Server(struct soap*, ns__Server *, const char*, const char*);

#ifndef soap_read_ns__Server
#define soap_read_ns__Server(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__Server(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__IP
#define SOAP_TYPE_ns__IP (30)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__IP(struct soap*, const char*, int, const ns__IP *, const char*);
SOAP_FMAC3 ns__IP * SOAP_FMAC4 soap_in_ns__IP(struct soap*, const char*, ns__IP *, const char*);
SOAP_FMAC1 ns__IP * SOAP_FMAC2 soap_instantiate_ns__IP(struct soap*, int, const char*, const char*, size_t*);

inline ns__IP * soap_new_ns__IP(struct soap *soap, int n = -1) { return soap_instantiate_ns__IP(soap, n, NULL, NULL, NULL); }

inline ns__IP * soap_new_req_ns__IP(
	struct soap *soap)
{	ns__IP *_p = soap_new_ns__IP(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns__IP * soap_new_set_ns__IP(
	struct soap *soap,
	int ipFirst,
	int ipSecond,
	int ipThird,
	int ipFourth)
{	ns__IP *_p = soap_new_ns__IP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__IP::ipFirst = ipFirst;
		_p->ns__IP::ipSecond = ipSecond;
		_p->ns__IP::ipThird = ipThird;
		_p->ns__IP::ipFourth = ipFourth;
	}
	return _p;
}

#ifndef soap_write_ns__IP
#define soap_write_ns__IP(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:IP", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__IP * SOAP_FMAC4 soap_get_ns__IP(struct soap*, ns__IP *, const char*, const char*);

#ifndef soap_read_ns__IP
#define soap_read_ns__IP(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__IP(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__UsersList
#define SOAP_TYPE_ns__UsersList (28)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__UsersList(struct soap*, const char*, int, const ns__UsersList *, const char*);
SOAP_FMAC3 ns__UsersList * SOAP_FMAC4 soap_in_ns__UsersList(struct soap*, const char*, ns__UsersList *, const char*);
SOAP_FMAC1 ns__UsersList * SOAP_FMAC2 soap_instantiate_ns__UsersList(struct soap*, int, const char*, const char*, size_t*);

inline ns__UsersList * soap_new_ns__UsersList(struct soap *soap, int n = -1) { return soap_instantiate_ns__UsersList(soap, n, NULL, NULL, NULL); }

inline ns__UsersList * soap_new_req_ns__UsersList(
	struct soap *soap,
	const ns__ErrorCode& usersListError)
{	ns__UsersList *_p = soap_new_ns__UsersList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__UsersList::usersListError = usersListError;
	}
	return _p;
}

inline ns__UsersList * soap_new_set_ns__UsersList(
	struct soap *soap,
	const std::vector<ns__User> & usersListUsers,
	const ns__ErrorCode& usersListError)
{	ns__UsersList *_p = soap_new_ns__UsersList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__UsersList::usersListUsers = usersListUsers;
		_p->ns__UsersList::usersListError = usersListError;
	}
	return _p;
}

#ifndef soap_write_ns__UsersList
#define soap_write_ns__UsersList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:UsersList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__UsersList * SOAP_FMAC4 soap_get_ns__UsersList(struct soap*, ns__UsersList *, const char*, const char*);

#ifndef soap_read_ns__UsersList
#define soap_read_ns__UsersList(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__UsersList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__User
#define SOAP_TYPE_ns__User (27)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__User(struct soap*, const char*, int, const ns__User *, const char*);
SOAP_FMAC3 ns__User * SOAP_FMAC4 soap_in_ns__User(struct soap*, const char*, ns__User *, const char*);
SOAP_FMAC1 ns__User * SOAP_FMAC2 soap_instantiate_ns__User(struct soap*, int, const char*, const char*, size_t*);

inline ns__User * soap_new_ns__User(struct soap *soap, int n = -1) { return soap_instantiate_ns__User(soap, n, NULL, NULL, NULL); }

inline ns__User * soap_new_req_ns__User(
	struct soap *soap,
	const struct tm& userSubmitDateTime,
	const ns__ErrorCode& userError)
{	ns__User *_p = soap_new_ns__User(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__User::userSubmitDateTime = userSubmitDateTime;
		_p->ns__User::userError = userError;
	}
	return _p;
}

inline ns__User * soap_new_set_ns__User(
	struct soap *soap,
	int userId,
	const std::string& userName,
	const std::string& userPassword,
	const std::string& userNewPassword,
	const std::string& userFirstName,
	const std::string& userLastName,
	enum ns__UserType userType,
	const std::string& userKey,
	const struct tm& userSubmitDateTime,
	const ns__ErrorCode& userError)
{	ns__User *_p = soap_new_ns__User(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__User::userId = userId;
		_p->ns__User::userName = userName;
		_p->ns__User::userPassword = userPassword;
		_p->ns__User::userNewPassword = userNewPassword;
		_p->ns__User::userFirstName = userFirstName;
		_p->ns__User::userLastName = userLastName;
		_p->ns__User::userType = userType;
		_p->ns__User::userKey = userKey;
		_p->ns__User::userSubmitDateTime = userSubmitDateTime;
		_p->ns__User::userError = userError;
	}
	return _p;
}

#ifndef soap_write_ns__User
#define soap_write_ns__User(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:User", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__User * SOAP_FMAC4 soap_get_ns__User(struct soap*, ns__User *, const char*, const char*);

#ifndef soap_read_ns__User
#define soap_read_ns__User(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__User(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ErrorCode
#define SOAP_TYPE_ns__ErrorCode (26)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ErrorCode(struct soap*, const char*, int, const ns__ErrorCode *, const char*);
SOAP_FMAC3 ns__ErrorCode * SOAP_FMAC4 soap_in_ns__ErrorCode(struct soap*, const char*, ns__ErrorCode *, const char*);
SOAP_FMAC1 ns__ErrorCode * SOAP_FMAC2 soap_instantiate_ns__ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline ns__ErrorCode * soap_new_ns__ErrorCode(struct soap *soap, int n = -1) { return soap_instantiate_ns__ErrorCode(soap, n, NULL, NULL, NULL); }

inline ns__ErrorCode * soap_new_req_ns__ErrorCode(
	struct soap *soap)
{	ns__ErrorCode *_p = soap_new_ns__ErrorCode(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns__ErrorCode * soap_new_set_ns__ErrorCode(
	struct soap *soap,
	int errorNumber,
	const std::string& errorMessage,
	enum ns__SettingLevel errorType)
{	ns__ErrorCode *_p = soap_new_ns__ErrorCode(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__ErrorCode::errorNumber = errorNumber;
		_p->ns__ErrorCode::errorMessage = errorMessage;
		_p->ns__ErrorCode::errorType = errorType;
	}
	return _p;
}

#ifndef soap_write_ns__ErrorCode
#define soap_write_ns__ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__ErrorCode * SOAP_FMAC4 soap_get_ns__ErrorCode(struct soap*, ns__ErrorCode *, const char*, const char*);

#ifndef soap_read_ns__ErrorCode
#define soap_read_ns__ErrorCode(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__ErrorCode(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (16)
#endif

#define soap_default_xsd__string(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__string(struct soap*, const std::string *);

#define soap_xsd__string2s soap_std__string2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__string soap_s2std__string

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__string soap_instantiate_std__string


#define soap_new_xsd__string soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__string
#define soap_write_xsd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__string(soap, data), 0) || soap_put_xsd__string(soap, data, "xsd:string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__string
#define soap_read_xsd__string(soap, data) ( ((data) ? (soap_default_xsd__string(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xsd__string(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data), 0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( ((data) ? (soap_default_std__string(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_std__string(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (142)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Fault(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (141)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Reason(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (138)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Detail(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (136)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Code(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (135)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Header(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_ns__TestWorld
#define SOAP_TYPE_ns__TestWorld (134)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__TestWorld(struct soap*, struct ns__TestWorld *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__TestWorld(struct soap*, const struct ns__TestWorld *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__TestWorld(struct soap*, const char*, int, const struct ns__TestWorld *, const char*);
SOAP_FMAC3 struct ns__TestWorld * SOAP_FMAC4 soap_in_ns__TestWorld(struct soap*, const char*, struct ns__TestWorld *, const char*);
SOAP_FMAC1 struct ns__TestWorld * SOAP_FMAC2 soap_instantiate_ns__TestWorld(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__TestWorld * soap_new_ns__TestWorld(struct soap *soap, int n = -1) { return soap_instantiate_ns__TestWorld(soap, n, NULL, NULL, NULL); }

inline struct ns__TestWorld * soap_new_req_ns__TestWorld(
	struct soap *soap,
	const struct tm& requestUserInfo)
{	struct ns__TestWorld *_p = soap_new_ns__TestWorld(soap);
	if (_p)
	{	soap_default_ns__TestWorld(soap, _p);
		_p->requestUserInfo = requestUserInfo;
	}
	return _p;
}

inline struct ns__TestWorld * soap_new_set_ns__TestWorld(
	struct soap *soap,
	const struct tm& requestUserInfo)
{	struct ns__TestWorld *_p = soap_new_ns__TestWorld(soap);
	if (_p)
	{	soap_default_ns__TestWorld(soap, _p);
		_p->requestUserInfo = requestUserInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__TestWorld(struct soap*, const struct ns__TestWorld *, const char*, const char*);

#ifndef soap_write_ns__TestWorld
#define soap_write_ns__TestWorld(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__TestWorld(soap, data), 0) || soap_put_ns__TestWorld(soap, data, "ns:TestWorld", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__TestWorld * SOAP_FMAC4 soap_get_ns__TestWorld(struct soap*, struct ns__TestWorld *, const char*, const char*);

#ifndef soap_read_ns__TestWorld
#define soap_read_ns__TestWorld(soap, data) ( ((data) ? (soap_default_ns__TestWorld(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__TestWorld(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__TestWorldResponse
#define SOAP_TYPE_ns__TestWorldResponse (133)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__TestWorldResponse(struct soap*, struct ns__TestWorldResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__TestWorldResponse(struct soap*, const struct ns__TestWorldResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__TestWorldResponse(struct soap*, const char*, int, const struct ns__TestWorldResponse *, const char*);
SOAP_FMAC3 struct ns__TestWorldResponse * SOAP_FMAC4 soap_in_ns__TestWorldResponse(struct soap*, const char*, struct ns__TestWorldResponse *, const char*);
SOAP_FMAC1 struct ns__TestWorldResponse * SOAP_FMAC2 soap_instantiate_ns__TestWorldResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__TestWorldResponse * soap_new_ns__TestWorldResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__TestWorldResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__TestWorldResponse * soap_new_req_ns__TestWorldResponse(
	struct soap *soap,
	const struct tm& responseErrorInfo)
{	struct ns__TestWorldResponse *_p = soap_new_ns__TestWorldResponse(soap);
	if (_p)
	{	soap_default_ns__TestWorldResponse(soap, _p);
		_p->responseErrorInfo = responseErrorInfo;
	}
	return _p;
}

inline struct ns__TestWorldResponse * soap_new_set_ns__TestWorldResponse(
	struct soap *soap,
	const struct tm& responseErrorInfo)
{	struct ns__TestWorldResponse *_p = soap_new_ns__TestWorldResponse(soap);
	if (_p)
	{	soap_default_ns__TestWorldResponse(soap, _p);
		_p->responseErrorInfo = responseErrorInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__TestWorldResponse(struct soap*, const struct ns__TestWorldResponse *, const char*, const char*);

#ifndef soap_write_ns__TestWorldResponse
#define soap_write_ns__TestWorldResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__TestWorldResponse(soap, data), 0) || soap_put_ns__TestWorldResponse(soap, data, "ns:TestWorldResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__TestWorldResponse * SOAP_FMAC4 soap_get_ns__TestWorldResponse(struct soap*, struct ns__TestWorldResponse *, const char*, const char*);

#ifndef soap_read_ns__TestWorldResponse
#define soap_read_ns__TestWorldResponse(soap, data) ( ((data) ? (soap_default_ns__TestWorldResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__TestWorldResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ChangeDeviceName
#define SOAP_TYPE_ns__ChangeDeviceName (130)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__ChangeDeviceName(struct soap*, struct ns__ChangeDeviceName *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__ChangeDeviceName(struct soap*, const struct ns__ChangeDeviceName *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ChangeDeviceName(struct soap*, const char*, int, const struct ns__ChangeDeviceName *, const char*);
SOAP_FMAC3 struct ns__ChangeDeviceName * SOAP_FMAC4 soap_in_ns__ChangeDeviceName(struct soap*, const char*, struct ns__ChangeDeviceName *, const char*);
SOAP_FMAC1 struct ns__ChangeDeviceName * SOAP_FMAC2 soap_instantiate_ns__ChangeDeviceName(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__ChangeDeviceName * soap_new_ns__ChangeDeviceName(struct soap *soap, int n = -1) { return soap_instantiate_ns__ChangeDeviceName(soap, n, NULL, NULL, NULL); }

inline struct ns__ChangeDeviceName * soap_new_req_ns__ChangeDeviceName(
	struct soap *soap,
	const ns__User& requestUserInfo,
	int deviceSerialNumber,
	const std::string& newCityName,
	const std::string& newLocationName,
	const std::string& newDeviceName)
{	struct ns__ChangeDeviceName *_p = soap_new_ns__ChangeDeviceName(soap);
	if (_p)
	{	soap_default_ns__ChangeDeviceName(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->deviceSerialNumber = deviceSerialNumber;
		_p->newCityName = newCityName;
		_p->newLocationName = newLocationName;
		_p->newDeviceName = newDeviceName;
	}
	return _p;
}

inline struct ns__ChangeDeviceName * soap_new_set_ns__ChangeDeviceName(
	struct soap *soap,
	const ns__User& requestUserInfo,
	int deviceSerialNumber,
	const std::string& newCityName,
	const std::string& newLocationName,
	const std::string& newDeviceName)
{	struct ns__ChangeDeviceName *_p = soap_new_ns__ChangeDeviceName(soap);
	if (_p)
	{	soap_default_ns__ChangeDeviceName(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->deviceSerialNumber = deviceSerialNumber;
		_p->newCityName = newCityName;
		_p->newLocationName = newLocationName;
		_p->newDeviceName = newDeviceName;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__ChangeDeviceName(struct soap*, const struct ns__ChangeDeviceName *, const char*, const char*);

#ifndef soap_write_ns__ChangeDeviceName
#define soap_write_ns__ChangeDeviceName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__ChangeDeviceName(soap, data), 0) || soap_put_ns__ChangeDeviceName(soap, data, "ns:ChangeDeviceName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__ChangeDeviceName * SOAP_FMAC4 soap_get_ns__ChangeDeviceName(struct soap*, struct ns__ChangeDeviceName *, const char*, const char*);

#ifndef soap_read_ns__ChangeDeviceName
#define soap_read_ns__ChangeDeviceName(soap, data) ( ((data) ? (soap_default_ns__ChangeDeviceName(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__ChangeDeviceName(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ChangeLocationName
#define SOAP_TYPE_ns__ChangeLocationName (128)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__ChangeLocationName(struct soap*, struct ns__ChangeLocationName *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__ChangeLocationName(struct soap*, const struct ns__ChangeLocationName *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ChangeLocationName(struct soap*, const char*, int, const struct ns__ChangeLocationName *, const char*);
SOAP_FMAC3 struct ns__ChangeLocationName * SOAP_FMAC4 soap_in_ns__ChangeLocationName(struct soap*, const char*, struct ns__ChangeLocationName *, const char*);
SOAP_FMAC1 struct ns__ChangeLocationName * SOAP_FMAC2 soap_instantiate_ns__ChangeLocationName(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__ChangeLocationName * soap_new_ns__ChangeLocationName(struct soap *soap, int n = -1) { return soap_instantiate_ns__ChangeLocationName(soap, n, NULL, NULL, NULL); }

inline struct ns__ChangeLocationName * soap_new_req_ns__ChangeLocationName(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const std::string& oldCityName,
	const std::string& newCityName,
	const std::string& oldLocationName,
	const std::string& newLocationName)
{	struct ns__ChangeLocationName *_p = soap_new_ns__ChangeLocationName(soap);
	if (_p)
	{	soap_default_ns__ChangeLocationName(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->oldCityName = oldCityName;
		_p->newCityName = newCityName;
		_p->oldLocationName = oldLocationName;
		_p->newLocationName = newLocationName;
	}
	return _p;
}

inline struct ns__ChangeLocationName * soap_new_set_ns__ChangeLocationName(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const std::string& oldCityName,
	const std::string& newCityName,
	const std::string& oldLocationName,
	const std::string& newLocationName)
{	struct ns__ChangeLocationName *_p = soap_new_ns__ChangeLocationName(soap);
	if (_p)
	{	soap_default_ns__ChangeLocationName(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->oldCityName = oldCityName;
		_p->newCityName = newCityName;
		_p->oldLocationName = oldLocationName;
		_p->newLocationName = newLocationName;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__ChangeLocationName(struct soap*, const struct ns__ChangeLocationName *, const char*, const char*);

#ifndef soap_write_ns__ChangeLocationName
#define soap_write_ns__ChangeLocationName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__ChangeLocationName(soap, data), 0) || soap_put_ns__ChangeLocationName(soap, data, "ns:ChangeLocationName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__ChangeLocationName * SOAP_FMAC4 soap_get_ns__ChangeLocationName(struct soap*, struct ns__ChangeLocationName *, const char*, const char*);

#ifndef soap_read_ns__ChangeLocationName
#define soap_read_ns__ChangeLocationName(soap, data) ( ((data) ? (soap_default_ns__ChangeLocationName(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__ChangeLocationName(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ChangeCityName
#define SOAP_TYPE_ns__ChangeCityName (126)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__ChangeCityName(struct soap*, struct ns__ChangeCityName *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__ChangeCityName(struct soap*, const struct ns__ChangeCityName *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ChangeCityName(struct soap*, const char*, int, const struct ns__ChangeCityName *, const char*);
SOAP_FMAC3 struct ns__ChangeCityName * SOAP_FMAC4 soap_in_ns__ChangeCityName(struct soap*, const char*, struct ns__ChangeCityName *, const char*);
SOAP_FMAC1 struct ns__ChangeCityName * SOAP_FMAC2 soap_instantiate_ns__ChangeCityName(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__ChangeCityName * soap_new_ns__ChangeCityName(struct soap *soap, int n = -1) { return soap_instantiate_ns__ChangeCityName(soap, n, NULL, NULL, NULL); }

inline struct ns__ChangeCityName * soap_new_req_ns__ChangeCityName(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const std::string& oldCityName,
	const std::string& newCityName)
{	struct ns__ChangeCityName *_p = soap_new_ns__ChangeCityName(soap);
	if (_p)
	{	soap_default_ns__ChangeCityName(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->oldCityName = oldCityName;
		_p->newCityName = newCityName;
	}
	return _p;
}

inline struct ns__ChangeCityName * soap_new_set_ns__ChangeCityName(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const std::string& oldCityName,
	const std::string& newCityName)
{	struct ns__ChangeCityName *_p = soap_new_ns__ChangeCityName(soap);
	if (_p)
	{	soap_default_ns__ChangeCityName(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->oldCityName = oldCityName;
		_p->newCityName = newCityName;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__ChangeCityName(struct soap*, const struct ns__ChangeCityName *, const char*, const char*);

#ifndef soap_write_ns__ChangeCityName
#define soap_write_ns__ChangeCityName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__ChangeCityName(soap, data), 0) || soap_put_ns__ChangeCityName(soap, data, "ns:ChangeCityName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__ChangeCityName * SOAP_FMAC4 soap_get_ns__ChangeCityName(struct soap*, struct ns__ChangeCityName *, const char*, const char*);

#ifndef soap_read_ns__ChangeCityName
#define soap_read_ns__ChangeCityName(soap, data) ( ((data) ? (soap_default_ns__ChangeCityName(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__ChangeCityName(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__GetCityAndLocations
#define SOAP_TYPE_ns__GetCityAndLocations (124)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetCityAndLocations(struct soap*, struct ns__GetCityAndLocations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetCityAndLocations(struct soap*, const struct ns__GetCityAndLocations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetCityAndLocations(struct soap*, const char*, int, const struct ns__GetCityAndLocations *, const char*);
SOAP_FMAC3 struct ns__GetCityAndLocations * SOAP_FMAC4 soap_in_ns__GetCityAndLocations(struct soap*, const char*, struct ns__GetCityAndLocations *, const char*);
SOAP_FMAC1 struct ns__GetCityAndLocations * SOAP_FMAC2 soap_instantiate_ns__GetCityAndLocations(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetCityAndLocations * soap_new_ns__GetCityAndLocations(struct soap *soap, int n = -1) { return soap_instantiate_ns__GetCityAndLocations(soap, n, NULL, NULL, NULL); }

inline struct ns__GetCityAndLocations * soap_new_req_ns__GetCityAndLocations(
	struct soap *soap,
	const ns__User& requestUserInfo)
{	struct ns__GetCityAndLocations *_p = soap_new_ns__GetCityAndLocations(soap);
	if (_p)
	{	soap_default_ns__GetCityAndLocations(soap, _p);
		_p->requestUserInfo = requestUserInfo;
	}
	return _p;
}

inline struct ns__GetCityAndLocations * soap_new_set_ns__GetCityAndLocations(
	struct soap *soap,
	const ns__User& requestUserInfo)
{	struct ns__GetCityAndLocations *_p = soap_new_ns__GetCityAndLocations(soap);
	if (_p)
	{	soap_default_ns__GetCityAndLocations(soap, _p);
		_p->requestUserInfo = requestUserInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetCityAndLocations(struct soap*, const struct ns__GetCityAndLocations *, const char*, const char*);

#ifndef soap_write_ns__GetCityAndLocations
#define soap_write_ns__GetCityAndLocations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__GetCityAndLocations(soap, data), 0) || soap_put_ns__GetCityAndLocations(soap, data, "ns:GetCityAndLocations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__GetCityAndLocations * SOAP_FMAC4 soap_get_ns__GetCityAndLocations(struct soap*, struct ns__GetCityAndLocations *, const char*, const char*);

#ifndef soap_read_ns__GetCityAndLocations
#define soap_read_ns__GetCityAndLocations(soap, data) ( ((data) ? (soap_default_ns__GetCityAndLocations(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__GetCityAndLocations(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__SetServerOptions
#define SOAP_TYPE_ns__SetServerOptions (121)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SetServerOptions(struct soap*, struct ns__SetServerOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SetServerOptions(struct soap*, const struct ns__SetServerOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SetServerOptions(struct soap*, const char*, int, const struct ns__SetServerOptions *, const char*);
SOAP_FMAC3 struct ns__SetServerOptions * SOAP_FMAC4 soap_in_ns__SetServerOptions(struct soap*, const char*, struct ns__SetServerOptions *, const char*);
SOAP_FMAC1 struct ns__SetServerOptions * SOAP_FMAC2 soap_instantiate_ns__SetServerOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__SetServerOptions * soap_new_ns__SetServerOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns__SetServerOptions(soap, n, NULL, NULL, NULL); }

inline struct ns__SetServerOptions * soap_new_req_ns__SetServerOptions(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__ServerOptions& serverOptions)
{	struct ns__SetServerOptions *_p = soap_new_ns__SetServerOptions(soap);
	if (_p)
	{	soap_default_ns__SetServerOptions(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->serverOptions = serverOptions;
	}
	return _p;
}

inline struct ns__SetServerOptions * soap_new_set_ns__SetServerOptions(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__ServerOptions& serverOptions)
{	struct ns__SetServerOptions *_p = soap_new_ns__SetServerOptions(soap);
	if (_p)
	{	soap_default_ns__SetServerOptions(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->serverOptions = serverOptions;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SetServerOptions(struct soap*, const struct ns__SetServerOptions *, const char*, const char*);

#ifndef soap_write_ns__SetServerOptions
#define soap_write_ns__SetServerOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__SetServerOptions(soap, data), 0) || soap_put_ns__SetServerOptions(soap, data, "ns:SetServerOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__SetServerOptions * SOAP_FMAC4 soap_get_ns__SetServerOptions(struct soap*, struct ns__SetServerOptions *, const char*, const char*);

#ifndef soap_read_ns__SetServerOptions
#define soap_read_ns__SetServerOptions(soap, data) ( ((data) ? (soap_default_ns__SetServerOptions(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__SetServerOptions(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__GetServerOptions
#define SOAP_TYPE_ns__GetServerOptions (119)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetServerOptions(struct soap*, struct ns__GetServerOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetServerOptions(struct soap*, const struct ns__GetServerOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetServerOptions(struct soap*, const char*, int, const struct ns__GetServerOptions *, const char*);
SOAP_FMAC3 struct ns__GetServerOptions * SOAP_FMAC4 soap_in_ns__GetServerOptions(struct soap*, const char*, struct ns__GetServerOptions *, const char*);
SOAP_FMAC1 struct ns__GetServerOptions * SOAP_FMAC2 soap_instantiate_ns__GetServerOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetServerOptions * soap_new_ns__GetServerOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns__GetServerOptions(soap, n, NULL, NULL, NULL); }

inline struct ns__GetServerOptions * soap_new_req_ns__GetServerOptions(
	struct soap *soap,
	const ns__User& requestUserInfo)
{	struct ns__GetServerOptions *_p = soap_new_ns__GetServerOptions(soap);
	if (_p)
	{	soap_default_ns__GetServerOptions(soap, _p);
		_p->requestUserInfo = requestUserInfo;
	}
	return _p;
}

inline struct ns__GetServerOptions * soap_new_set_ns__GetServerOptions(
	struct soap *soap,
	const ns__User& requestUserInfo)
{	struct ns__GetServerOptions *_p = soap_new_ns__GetServerOptions(soap);
	if (_p)
	{	soap_default_ns__GetServerOptions(soap, _p);
		_p->requestUserInfo = requestUserInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetServerOptions(struct soap*, const struct ns__GetServerOptions *, const char*, const char*);

#ifndef soap_write_ns__GetServerOptions
#define soap_write_ns__GetServerOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__GetServerOptions(soap, data), 0) || soap_put_ns__GetServerOptions(soap, data, "ns:GetServerOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__GetServerOptions * SOAP_FMAC4 soap_get_ns__GetServerOptions(struct soap*, struct ns__GetServerOptions *, const char*, const char*);

#ifndef soap_read_ns__GetServerOptions
#define soap_read_ns__GetServerOptions(soap, data) ( ((data) ? (soap_default_ns__GetServerOptions(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__GetServerOptions(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__GetDeviceStatusLog
#define SOAP_TYPE_ns__GetDeviceStatusLog (116)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetDeviceStatusLog(struct soap*, struct ns__GetDeviceStatusLog *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetDeviceStatusLog(struct soap*, const struct ns__GetDeviceStatusLog *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetDeviceStatusLog(struct soap*, const char*, int, const struct ns__GetDeviceStatusLog *, const char*);
SOAP_FMAC3 struct ns__GetDeviceStatusLog * SOAP_FMAC4 soap_in_ns__GetDeviceStatusLog(struct soap*, const char*, struct ns__GetDeviceStatusLog *, const char*);
SOAP_FMAC1 struct ns__GetDeviceStatusLog * SOAP_FMAC2 soap_instantiate_ns__GetDeviceStatusLog(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetDeviceStatusLog * soap_new_ns__GetDeviceStatusLog(struct soap *soap, int n = -1) { return soap_instantiate_ns__GetDeviceStatusLog(soap, n, NULL, NULL, NULL); }

inline struct ns__GetDeviceStatusLog * soap_new_req_ns__GetDeviceStatusLog(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__DeviceStatusInfo& requestStatusLogInfo)
{	struct ns__GetDeviceStatusLog *_p = soap_new_ns__GetDeviceStatusLog(soap);
	if (_p)
	{	soap_default_ns__GetDeviceStatusLog(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestStatusLogInfo = requestStatusLogInfo;
	}
	return _p;
}

inline struct ns__GetDeviceStatusLog * soap_new_set_ns__GetDeviceStatusLog(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__DeviceStatusInfo& requestStatusLogInfo)
{	struct ns__GetDeviceStatusLog *_p = soap_new_ns__GetDeviceStatusLog(soap);
	if (_p)
	{	soap_default_ns__GetDeviceStatusLog(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestStatusLogInfo = requestStatusLogInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetDeviceStatusLog(struct soap*, const struct ns__GetDeviceStatusLog *, const char*, const char*);

#ifndef soap_write_ns__GetDeviceStatusLog
#define soap_write_ns__GetDeviceStatusLog(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__GetDeviceStatusLog(soap, data), 0) || soap_put_ns__GetDeviceStatusLog(soap, data, "ns:GetDeviceStatusLog", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__GetDeviceStatusLog * SOAP_FMAC4 soap_get_ns__GetDeviceStatusLog(struct soap*, struct ns__GetDeviceStatusLog *, const char*, const char*);

#ifndef soap_read_ns__GetDeviceStatusLog
#define soap_read_ns__GetDeviceStatusLog(soap, data) ( ((data) ? (soap_default_ns__GetDeviceStatusLog(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__GetDeviceStatusLog(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__SaveDeviceStatusLog
#define SOAP_TYPE_ns__SaveDeviceStatusLog (113)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SaveDeviceStatusLog(struct soap*, struct ns__SaveDeviceStatusLog *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SaveDeviceStatusLog(struct soap*, const struct ns__SaveDeviceStatusLog *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SaveDeviceStatusLog(struct soap*, const char*, int, const struct ns__SaveDeviceStatusLog *, const char*);
SOAP_FMAC3 struct ns__SaveDeviceStatusLog * SOAP_FMAC4 soap_in_ns__SaveDeviceStatusLog(struct soap*, const char*, struct ns__SaveDeviceStatusLog *, const char*);
SOAP_FMAC1 struct ns__SaveDeviceStatusLog * SOAP_FMAC2 soap_instantiate_ns__SaveDeviceStatusLog(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__SaveDeviceStatusLog * soap_new_ns__SaveDeviceStatusLog(struct soap *soap, int n = -1) { return soap_instantiate_ns__SaveDeviceStatusLog(soap, n, NULL, NULL, NULL); }

inline struct ns__SaveDeviceStatusLog * soap_new_req_ns__SaveDeviceStatusLog(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__DeviceStatusLog& requestStatusLogInfo)
{	struct ns__SaveDeviceStatusLog *_p = soap_new_ns__SaveDeviceStatusLog(soap);
	if (_p)
	{	soap_default_ns__SaveDeviceStatusLog(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestStatusLogInfo = requestStatusLogInfo;
	}
	return _p;
}

inline struct ns__SaveDeviceStatusLog * soap_new_set_ns__SaveDeviceStatusLog(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__DeviceStatusLog& requestStatusLogInfo)
{	struct ns__SaveDeviceStatusLog *_p = soap_new_ns__SaveDeviceStatusLog(soap);
	if (_p)
	{	soap_default_ns__SaveDeviceStatusLog(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestStatusLogInfo = requestStatusLogInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SaveDeviceStatusLog(struct soap*, const struct ns__SaveDeviceStatusLog *, const char*, const char*);

#ifndef soap_write_ns__SaveDeviceStatusLog
#define soap_write_ns__SaveDeviceStatusLog(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__SaveDeviceStatusLog(soap, data), 0) || soap_put_ns__SaveDeviceStatusLog(soap, data, "ns:SaveDeviceStatusLog", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__SaveDeviceStatusLog * SOAP_FMAC4 soap_get_ns__SaveDeviceStatusLog(struct soap*, struct ns__SaveDeviceStatusLog *, const char*, const char*);

#ifndef soap_read_ns__SaveDeviceStatusLog
#define soap_read_ns__SaveDeviceStatusLog(soap, data) ( ((data) ? (soap_default_ns__SaveDeviceStatusLog(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__SaveDeviceStatusLog(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__GetUserLog
#define SOAP_TYPE_ns__GetUserLog (111)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetUserLog(struct soap*, struct ns__GetUserLog *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetUserLog(struct soap*, const struct ns__GetUserLog *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetUserLog(struct soap*, const char*, int, const struct ns__GetUserLog *, const char*);
SOAP_FMAC3 struct ns__GetUserLog * SOAP_FMAC4 soap_in_ns__GetUserLog(struct soap*, const char*, struct ns__GetUserLog *, const char*);
SOAP_FMAC1 struct ns__GetUserLog * SOAP_FMAC2 soap_instantiate_ns__GetUserLog(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetUserLog * soap_new_ns__GetUserLog(struct soap *soap, int n = -1) { return soap_instantiate_ns__GetUserLog(soap, n, NULL, NULL, NULL); }

inline struct ns__GetUserLog * soap_new_req_ns__GetUserLog(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__Report& requestReportInfo)
{	struct ns__GetUserLog *_p = soap_new_ns__GetUserLog(soap);
	if (_p)
	{	soap_default_ns__GetUserLog(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestReportInfo = requestReportInfo;
	}
	return _p;
}

inline struct ns__GetUserLog * soap_new_set_ns__GetUserLog(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__Report& requestReportInfo)
{	struct ns__GetUserLog *_p = soap_new_ns__GetUserLog(soap);
	if (_p)
	{	soap_default_ns__GetUserLog(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestReportInfo = requestReportInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetUserLog(struct soap*, const struct ns__GetUserLog *, const char*, const char*);

#ifndef soap_write_ns__GetUserLog
#define soap_write_ns__GetUserLog(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__GetUserLog(soap, data), 0) || soap_put_ns__GetUserLog(soap, data, "ns:GetUserLog", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__GetUserLog * SOAP_FMAC4 soap_get_ns__GetUserLog(struct soap*, struct ns__GetUserLog *, const char*, const char*);

#ifndef soap_read_ns__GetUserLog
#define soap_read_ns__GetUserLog(soap, data) ( ((data) ? (soap_default_ns__GetUserLog(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__GetUserLog(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__GetUserLogResponse
#define SOAP_TYPE_ns__GetUserLogResponse (110)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetUserLogResponse(struct soap*, struct ns__GetUserLogResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetUserLogResponse(struct soap*, const struct ns__GetUserLogResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetUserLogResponse(struct soap*, const char*, int, const struct ns__GetUserLogResponse *, const char*);
SOAP_FMAC3 struct ns__GetUserLogResponse * SOAP_FMAC4 soap_in_ns__GetUserLogResponse(struct soap*, const char*, struct ns__GetUserLogResponse *, const char*);
SOAP_FMAC1 struct ns__GetUserLogResponse * SOAP_FMAC2 soap_instantiate_ns__GetUserLogResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetUserLogResponse * soap_new_ns__GetUserLogResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__GetUserLogResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__GetUserLogResponse * soap_new_req_ns__GetUserLogResponse(
	struct soap *soap,
	const std::vector<ns__UserLog> & responseActivityLogInfo)
{	struct ns__GetUserLogResponse *_p = soap_new_ns__GetUserLogResponse(soap);
	if (_p)
	{	soap_default_ns__GetUserLogResponse(soap, _p);
		_p->responseActivityLogInfo = responseActivityLogInfo;
	}
	return _p;
}

inline struct ns__GetUserLogResponse * soap_new_set_ns__GetUserLogResponse(
	struct soap *soap,
	const std::vector<ns__UserLog> & responseActivityLogInfo)
{	struct ns__GetUserLogResponse *_p = soap_new_ns__GetUserLogResponse(soap);
	if (_p)
	{	soap_default_ns__GetUserLogResponse(soap, _p);
		_p->responseActivityLogInfo = responseActivityLogInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetUserLogResponse(struct soap*, const struct ns__GetUserLogResponse *, const char*, const char*);

#ifndef soap_write_ns__GetUserLogResponse
#define soap_write_ns__GetUserLogResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__GetUserLogResponse(soap, data), 0) || soap_put_ns__GetUserLogResponse(soap, data, "ns:GetUserLogResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__GetUserLogResponse * SOAP_FMAC4 soap_get_ns__GetUserLogResponse(struct soap*, struct ns__GetUserLogResponse *, const char*, const char*);

#ifndef soap_read_ns__GetUserLogResponse
#define soap_read_ns__GetUserLogResponse(soap, data) ( ((data) ? (soap_default_ns__GetUserLogResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__GetUserLogResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__SaveUserLog
#define SOAP_TYPE_ns__SaveUserLog (106)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SaveUserLog(struct soap*, struct ns__SaveUserLog *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SaveUserLog(struct soap*, const struct ns__SaveUserLog *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SaveUserLog(struct soap*, const char*, int, const struct ns__SaveUserLog *, const char*);
SOAP_FMAC3 struct ns__SaveUserLog * SOAP_FMAC4 soap_in_ns__SaveUserLog(struct soap*, const char*, struct ns__SaveUserLog *, const char*);
SOAP_FMAC1 struct ns__SaveUserLog * SOAP_FMAC2 soap_instantiate_ns__SaveUserLog(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__SaveUserLog * soap_new_ns__SaveUserLog(struct soap *soap, int n = -1) { return soap_instantiate_ns__SaveUserLog(soap, n, NULL, NULL, NULL); }

inline struct ns__SaveUserLog * soap_new_req_ns__SaveUserLog(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__UserLog& requestActivityLogInfo)
{	struct ns__SaveUserLog *_p = soap_new_ns__SaveUserLog(soap);
	if (_p)
	{	soap_default_ns__SaveUserLog(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestActivityLogInfo = requestActivityLogInfo;
	}
	return _p;
}

inline struct ns__SaveUserLog * soap_new_set_ns__SaveUserLog(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__UserLog& requestActivityLogInfo)
{	struct ns__SaveUserLog *_p = soap_new_ns__SaveUserLog(soap);
	if (_p)
	{	soap_default_ns__SaveUserLog(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestActivityLogInfo = requestActivityLogInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SaveUserLog(struct soap*, const struct ns__SaveUserLog *, const char*, const char*);

#ifndef soap_write_ns__SaveUserLog
#define soap_write_ns__SaveUserLog(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__SaveUserLog(soap, data), 0) || soap_put_ns__SaveUserLog(soap, data, "ns:SaveUserLog", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__SaveUserLog * SOAP_FMAC4 soap_get_ns__SaveUserLog(struct soap*, struct ns__SaveUserLog *, const char*, const char*);

#ifndef soap_read_ns__SaveUserLog
#define soap_read_ns__SaveUserLog(soap, data) ( ((data) ? (soap_default_ns__SaveUserLog(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__SaveUserLog(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__GetActivityLog
#define SOAP_TYPE_ns__GetActivityLog (104)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetActivityLog(struct soap*, struct ns__GetActivityLog *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetActivityLog(struct soap*, const struct ns__GetActivityLog *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetActivityLog(struct soap*, const char*, int, const struct ns__GetActivityLog *, const char*);
SOAP_FMAC3 struct ns__GetActivityLog * SOAP_FMAC4 soap_in_ns__GetActivityLog(struct soap*, const char*, struct ns__GetActivityLog *, const char*);
SOAP_FMAC1 struct ns__GetActivityLog * SOAP_FMAC2 soap_instantiate_ns__GetActivityLog(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetActivityLog * soap_new_ns__GetActivityLog(struct soap *soap, int n = -1) { return soap_instantiate_ns__GetActivityLog(soap, n, NULL, NULL, NULL); }

inline struct ns__GetActivityLog * soap_new_req_ns__GetActivityLog(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__Report& requestReportInfo)
{	struct ns__GetActivityLog *_p = soap_new_ns__GetActivityLog(soap);
	if (_p)
	{	soap_default_ns__GetActivityLog(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestReportInfo = requestReportInfo;
	}
	return _p;
}

inline struct ns__GetActivityLog * soap_new_set_ns__GetActivityLog(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__Report& requestReportInfo)
{	struct ns__GetActivityLog *_p = soap_new_ns__GetActivityLog(soap);
	if (_p)
	{	soap_default_ns__GetActivityLog(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestReportInfo = requestReportInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetActivityLog(struct soap*, const struct ns__GetActivityLog *, const char*, const char*);

#ifndef soap_write_ns__GetActivityLog
#define soap_write_ns__GetActivityLog(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__GetActivityLog(soap, data), 0) || soap_put_ns__GetActivityLog(soap, data, "ns:GetActivityLog", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__GetActivityLog * SOAP_FMAC4 soap_get_ns__GetActivityLog(struct soap*, struct ns__GetActivityLog *, const char*, const char*);

#ifndef soap_read_ns__GetActivityLog
#define soap_read_ns__GetActivityLog(soap, data) ( ((data) ? (soap_default_ns__GetActivityLog(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__GetActivityLog(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__GetActivityLogResponse
#define SOAP_TYPE_ns__GetActivityLogResponse (103)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetActivityLogResponse(struct soap*, struct ns__GetActivityLogResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetActivityLogResponse(struct soap*, const struct ns__GetActivityLogResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetActivityLogResponse(struct soap*, const char*, int, const struct ns__GetActivityLogResponse *, const char*);
SOAP_FMAC3 struct ns__GetActivityLogResponse * SOAP_FMAC4 soap_in_ns__GetActivityLogResponse(struct soap*, const char*, struct ns__GetActivityLogResponse *, const char*);
SOAP_FMAC1 struct ns__GetActivityLogResponse * SOAP_FMAC2 soap_instantiate_ns__GetActivityLogResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetActivityLogResponse * soap_new_ns__GetActivityLogResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__GetActivityLogResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__GetActivityLogResponse * soap_new_req_ns__GetActivityLogResponse(
	struct soap *soap,
	const std::vector<ns__ActivityLog> & responseActivityLogInfo)
{	struct ns__GetActivityLogResponse *_p = soap_new_ns__GetActivityLogResponse(soap);
	if (_p)
	{	soap_default_ns__GetActivityLogResponse(soap, _p);
		_p->responseActivityLogInfo = responseActivityLogInfo;
	}
	return _p;
}

inline struct ns__GetActivityLogResponse * soap_new_set_ns__GetActivityLogResponse(
	struct soap *soap,
	const std::vector<ns__ActivityLog> & responseActivityLogInfo)
{	struct ns__GetActivityLogResponse *_p = soap_new_ns__GetActivityLogResponse(soap);
	if (_p)
	{	soap_default_ns__GetActivityLogResponse(soap, _p);
		_p->responseActivityLogInfo = responseActivityLogInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetActivityLogResponse(struct soap*, const struct ns__GetActivityLogResponse *, const char*, const char*);

#ifndef soap_write_ns__GetActivityLogResponse
#define soap_write_ns__GetActivityLogResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__GetActivityLogResponse(soap, data), 0) || soap_put_ns__GetActivityLogResponse(soap, data, "ns:GetActivityLogResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__GetActivityLogResponse * SOAP_FMAC4 soap_get_ns__GetActivityLogResponse(struct soap*, struct ns__GetActivityLogResponse *, const char*, const char*);

#ifndef soap_read_ns__GetActivityLogResponse
#define soap_read_ns__GetActivityLogResponse(soap, data) ( ((data) ? (soap_default_ns__GetActivityLogResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__GetActivityLogResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__SaveActivityLog
#define SOAP_TYPE_ns__SaveActivityLog (99)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SaveActivityLog(struct soap*, struct ns__SaveActivityLog *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SaveActivityLog(struct soap*, const struct ns__SaveActivityLog *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SaveActivityLog(struct soap*, const char*, int, const struct ns__SaveActivityLog *, const char*);
SOAP_FMAC3 struct ns__SaveActivityLog * SOAP_FMAC4 soap_in_ns__SaveActivityLog(struct soap*, const char*, struct ns__SaveActivityLog *, const char*);
SOAP_FMAC1 struct ns__SaveActivityLog * SOAP_FMAC2 soap_instantiate_ns__SaveActivityLog(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__SaveActivityLog * soap_new_ns__SaveActivityLog(struct soap *soap, int n = -1) { return soap_instantiate_ns__SaveActivityLog(soap, n, NULL, NULL, NULL); }

inline struct ns__SaveActivityLog * soap_new_req_ns__SaveActivityLog(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__ActivityLog& requestActivityLogInfo)
{	struct ns__SaveActivityLog *_p = soap_new_ns__SaveActivityLog(soap);
	if (_p)
	{	soap_default_ns__SaveActivityLog(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestActivityLogInfo = requestActivityLogInfo;
	}
	return _p;
}

inline struct ns__SaveActivityLog * soap_new_set_ns__SaveActivityLog(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__ActivityLog& requestActivityLogInfo)
{	struct ns__SaveActivityLog *_p = soap_new_ns__SaveActivityLog(soap);
	if (_p)
	{	soap_default_ns__SaveActivityLog(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestActivityLogInfo = requestActivityLogInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SaveActivityLog(struct soap*, const struct ns__SaveActivityLog *, const char*, const char*);

#ifndef soap_write_ns__SaveActivityLog
#define soap_write_ns__SaveActivityLog(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__SaveActivityLog(soap, data), 0) || soap_put_ns__SaveActivityLog(soap, data, "ns:SaveActivityLog", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__SaveActivityLog * SOAP_FMAC4 soap_get_ns__SaveActivityLog(struct soap*, struct ns__SaveActivityLog *, const char*, const char*);

#ifndef soap_read_ns__SaveActivityLog
#define soap_read_ns__SaveActivityLog(soap, data) ( ((data) ? (soap_default_ns__SaveActivityLog(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__SaveActivityLog(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__GetUserDevices
#define SOAP_TYPE_ns__GetUserDevices (97)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetUserDevices(struct soap*, struct ns__GetUserDevices *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetUserDevices(struct soap*, const struct ns__GetUserDevices *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetUserDevices(struct soap*, const char*, int, const struct ns__GetUserDevices *, const char*);
SOAP_FMAC3 struct ns__GetUserDevices * SOAP_FMAC4 soap_in_ns__GetUserDevices(struct soap*, const char*, struct ns__GetUserDevices *, const char*);
SOAP_FMAC1 struct ns__GetUserDevices * SOAP_FMAC2 soap_instantiate_ns__GetUserDevices(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetUserDevices * soap_new_ns__GetUserDevices(struct soap *soap, int n = -1) { return soap_instantiate_ns__GetUserDevices(soap, n, NULL, NULL, NULL); }

inline struct ns__GetUserDevices * soap_new_req_ns__GetUserDevices(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__User& requestSelectedUserInfo)
{	struct ns__GetUserDevices *_p = soap_new_ns__GetUserDevices(soap);
	if (_p)
	{	soap_default_ns__GetUserDevices(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestSelectedUserInfo = requestSelectedUserInfo;
	}
	return _p;
}

inline struct ns__GetUserDevices * soap_new_set_ns__GetUserDevices(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__User& requestSelectedUserInfo)
{	struct ns__GetUserDevices *_p = soap_new_ns__GetUserDevices(soap);
	if (_p)
	{	soap_default_ns__GetUserDevices(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestSelectedUserInfo = requestSelectedUserInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetUserDevices(struct soap*, const struct ns__GetUserDevices *, const char*, const char*);

#ifndef soap_write_ns__GetUserDevices
#define soap_write_ns__GetUserDevices(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__GetUserDevices(soap, data), 0) || soap_put_ns__GetUserDevices(soap, data, "ns:GetUserDevices", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__GetUserDevices * SOAP_FMAC4 soap_get_ns__GetUserDevices(struct soap*, struct ns__GetUserDevices *, const char*, const char*);

#ifndef soap_read_ns__GetUserDevices
#define soap_read_ns__GetUserDevices(soap, data) ( ((data) ? (soap_default_ns__GetUserDevices(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__GetUserDevices(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__DeleteDeviceFromUserList
#define SOAP_TYPE_ns__DeleteDeviceFromUserList (95)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__DeleteDeviceFromUserList(struct soap*, struct ns__DeleteDeviceFromUserList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__DeleteDeviceFromUserList(struct soap*, const struct ns__DeleteDeviceFromUserList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DeleteDeviceFromUserList(struct soap*, const char*, int, const struct ns__DeleteDeviceFromUserList *, const char*);
SOAP_FMAC3 struct ns__DeleteDeviceFromUserList * SOAP_FMAC4 soap_in_ns__DeleteDeviceFromUserList(struct soap*, const char*, struct ns__DeleteDeviceFromUserList *, const char*);
SOAP_FMAC1 struct ns__DeleteDeviceFromUserList * SOAP_FMAC2 soap_instantiate_ns__DeleteDeviceFromUserList(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__DeleteDeviceFromUserList * soap_new_ns__DeleteDeviceFromUserList(struct soap *soap, int n = -1) { return soap_instantiate_ns__DeleteDeviceFromUserList(soap, n, NULL, NULL, NULL); }

inline struct ns__DeleteDeviceFromUserList * soap_new_req_ns__DeleteDeviceFromUserList(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__UserDevice& requestUserDeviceInfo)
{	struct ns__DeleteDeviceFromUserList *_p = soap_new_ns__DeleteDeviceFromUserList(soap);
	if (_p)
	{	soap_default_ns__DeleteDeviceFromUserList(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestUserDeviceInfo = requestUserDeviceInfo;
	}
	return _p;
}

inline struct ns__DeleteDeviceFromUserList * soap_new_set_ns__DeleteDeviceFromUserList(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__UserDevice& requestUserDeviceInfo)
{	struct ns__DeleteDeviceFromUserList *_p = soap_new_ns__DeleteDeviceFromUserList(soap);
	if (_p)
	{	soap_default_ns__DeleteDeviceFromUserList(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestUserDeviceInfo = requestUserDeviceInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__DeleteDeviceFromUserList(struct soap*, const struct ns__DeleteDeviceFromUserList *, const char*, const char*);

#ifndef soap_write_ns__DeleteDeviceFromUserList
#define soap_write_ns__DeleteDeviceFromUserList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__DeleteDeviceFromUserList(soap, data), 0) || soap_put_ns__DeleteDeviceFromUserList(soap, data, "ns:DeleteDeviceFromUserList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__DeleteDeviceFromUserList * SOAP_FMAC4 soap_get_ns__DeleteDeviceFromUserList(struct soap*, struct ns__DeleteDeviceFromUserList *, const char*, const char*);

#ifndef soap_read_ns__DeleteDeviceFromUserList
#define soap_read_ns__DeleteDeviceFromUserList(soap, data) ( ((data) ? (soap_default_ns__DeleteDeviceFromUserList(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__DeleteDeviceFromUserList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__AssignDeviceToUser
#define SOAP_TYPE_ns__AssignDeviceToUser (93)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__AssignDeviceToUser(struct soap*, struct ns__AssignDeviceToUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__AssignDeviceToUser(struct soap*, const struct ns__AssignDeviceToUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__AssignDeviceToUser(struct soap*, const char*, int, const struct ns__AssignDeviceToUser *, const char*);
SOAP_FMAC3 struct ns__AssignDeviceToUser * SOAP_FMAC4 soap_in_ns__AssignDeviceToUser(struct soap*, const char*, struct ns__AssignDeviceToUser *, const char*);
SOAP_FMAC1 struct ns__AssignDeviceToUser * SOAP_FMAC2 soap_instantiate_ns__AssignDeviceToUser(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__AssignDeviceToUser * soap_new_ns__AssignDeviceToUser(struct soap *soap, int n = -1) { return soap_instantiate_ns__AssignDeviceToUser(soap, n, NULL, NULL, NULL); }

inline struct ns__AssignDeviceToUser * soap_new_req_ns__AssignDeviceToUser(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__UserDevice& requestUserDeviceInfo)
{	struct ns__AssignDeviceToUser *_p = soap_new_ns__AssignDeviceToUser(soap);
	if (_p)
	{	soap_default_ns__AssignDeviceToUser(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestUserDeviceInfo = requestUserDeviceInfo;
	}
	return _p;
}

inline struct ns__AssignDeviceToUser * soap_new_set_ns__AssignDeviceToUser(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__UserDevice& requestUserDeviceInfo)
{	struct ns__AssignDeviceToUser *_p = soap_new_ns__AssignDeviceToUser(soap);
	if (_p)
	{	soap_default_ns__AssignDeviceToUser(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestUserDeviceInfo = requestUserDeviceInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__AssignDeviceToUser(struct soap*, const struct ns__AssignDeviceToUser *, const char*, const char*);

#ifndef soap_write_ns__AssignDeviceToUser
#define soap_write_ns__AssignDeviceToUser(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__AssignDeviceToUser(soap, data), 0) || soap_put_ns__AssignDeviceToUser(soap, data, "ns:AssignDeviceToUser", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__AssignDeviceToUser * SOAP_FMAC4 soap_get_ns__AssignDeviceToUser(struct soap*, struct ns__AssignDeviceToUser *, const char*, const char*);

#ifndef soap_read_ns__AssignDeviceToUser
#define soap_read_ns__AssignDeviceToUser(soap, data) ( ((data) ? (soap_default_ns__AssignDeviceToUser(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__AssignDeviceToUser(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__DeleteUser
#define SOAP_TYPE_ns__DeleteUser (91)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__DeleteUser(struct soap*, struct ns__DeleteUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__DeleteUser(struct soap*, const struct ns__DeleteUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DeleteUser(struct soap*, const char*, int, const struct ns__DeleteUser *, const char*);
SOAP_FMAC3 struct ns__DeleteUser * SOAP_FMAC4 soap_in_ns__DeleteUser(struct soap*, const char*, struct ns__DeleteUser *, const char*);
SOAP_FMAC1 struct ns__DeleteUser * SOAP_FMAC2 soap_instantiate_ns__DeleteUser(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__DeleteUser * soap_new_ns__DeleteUser(struct soap *soap, int n = -1) { return soap_instantiate_ns__DeleteUser(soap, n, NULL, NULL, NULL); }

inline struct ns__DeleteUser * soap_new_req_ns__DeleteUser(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__User& requestDeleteUserInfo)
{	struct ns__DeleteUser *_p = soap_new_ns__DeleteUser(soap);
	if (_p)
	{	soap_default_ns__DeleteUser(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestDeleteUserInfo = requestDeleteUserInfo;
	}
	return _p;
}

inline struct ns__DeleteUser * soap_new_set_ns__DeleteUser(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__User& requestDeleteUserInfo)
{	struct ns__DeleteUser *_p = soap_new_ns__DeleteUser(soap);
	if (_p)
	{	soap_default_ns__DeleteUser(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestDeleteUserInfo = requestDeleteUserInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__DeleteUser(struct soap*, const struct ns__DeleteUser *, const char*, const char*);

#ifndef soap_write_ns__DeleteUser
#define soap_write_ns__DeleteUser(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__DeleteUser(soap, data), 0) || soap_put_ns__DeleteUser(soap, data, "ns:DeleteUser", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__DeleteUser * SOAP_FMAC4 soap_get_ns__DeleteUser(struct soap*, struct ns__DeleteUser *, const char*, const char*);

#ifndef soap_read_ns__DeleteUser
#define soap_read_ns__DeleteUser(soap, data) ( ((data) ? (soap_default_ns__DeleteUser(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__DeleteUser(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__UpdateUser
#define SOAP_TYPE_ns__UpdateUser (89)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__UpdateUser(struct soap*, struct ns__UpdateUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__UpdateUser(struct soap*, const struct ns__UpdateUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__UpdateUser(struct soap*, const char*, int, const struct ns__UpdateUser *, const char*);
SOAP_FMAC3 struct ns__UpdateUser * SOAP_FMAC4 soap_in_ns__UpdateUser(struct soap*, const char*, struct ns__UpdateUser *, const char*);
SOAP_FMAC1 struct ns__UpdateUser * SOAP_FMAC2 soap_instantiate_ns__UpdateUser(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__UpdateUser * soap_new_ns__UpdateUser(struct soap *soap, int n = -1) { return soap_instantiate_ns__UpdateUser(soap, n, NULL, NULL, NULL); }

inline struct ns__UpdateUser * soap_new_req_ns__UpdateUser(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__User& requestNewUserInfo)
{	struct ns__UpdateUser *_p = soap_new_ns__UpdateUser(soap);
	if (_p)
	{	soap_default_ns__UpdateUser(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestNewUserInfo = requestNewUserInfo;
	}
	return _p;
}

inline struct ns__UpdateUser * soap_new_set_ns__UpdateUser(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__User& requestNewUserInfo)
{	struct ns__UpdateUser *_p = soap_new_ns__UpdateUser(soap);
	if (_p)
	{	soap_default_ns__UpdateUser(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestNewUserInfo = requestNewUserInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__UpdateUser(struct soap*, const struct ns__UpdateUser *, const char*, const char*);

#ifndef soap_write_ns__UpdateUser
#define soap_write_ns__UpdateUser(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__UpdateUser(soap, data), 0) || soap_put_ns__UpdateUser(soap, data, "ns:UpdateUser", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__UpdateUser * SOAP_FMAC4 soap_get_ns__UpdateUser(struct soap*, struct ns__UpdateUser *, const char*, const char*);

#ifndef soap_read_ns__UpdateUser
#define soap_read_ns__UpdateUser(soap, data) ( ((data) ? (soap_default_ns__UpdateUser(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__UpdateUser(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__AddUser
#define SOAP_TYPE_ns__AddUser (87)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__AddUser(struct soap*, struct ns__AddUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__AddUser(struct soap*, const struct ns__AddUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__AddUser(struct soap*, const char*, int, const struct ns__AddUser *, const char*);
SOAP_FMAC3 struct ns__AddUser * SOAP_FMAC4 soap_in_ns__AddUser(struct soap*, const char*, struct ns__AddUser *, const char*);
SOAP_FMAC1 struct ns__AddUser * SOAP_FMAC2 soap_instantiate_ns__AddUser(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__AddUser * soap_new_ns__AddUser(struct soap *soap, int n = -1) { return soap_instantiate_ns__AddUser(soap, n, NULL, NULL, NULL); }

inline struct ns__AddUser * soap_new_req_ns__AddUser(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__User& requestNewUserInfo)
{	struct ns__AddUser *_p = soap_new_ns__AddUser(soap);
	if (_p)
	{	soap_default_ns__AddUser(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestNewUserInfo = requestNewUserInfo;
	}
	return _p;
}

inline struct ns__AddUser * soap_new_set_ns__AddUser(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__User& requestNewUserInfo)
{	struct ns__AddUser *_p = soap_new_ns__AddUser(soap);
	if (_p)
	{	soap_default_ns__AddUser(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestNewUserInfo = requestNewUserInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__AddUser(struct soap*, const struct ns__AddUser *, const char*, const char*);

#ifndef soap_write_ns__AddUser
#define soap_write_ns__AddUser(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__AddUser(soap, data), 0) || soap_put_ns__AddUser(soap, data, "ns:AddUser", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__AddUser * SOAP_FMAC4 soap_get_ns__AddUser(struct soap*, struct ns__AddUser *, const char*, const char*);

#ifndef soap_read_ns__AddUser
#define soap_read_ns__AddUser(soap, data) ( ((data) ? (soap_default_ns__AddUser(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__AddUser(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__GetUsersList
#define SOAP_TYPE_ns__GetUsersList (85)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetUsersList(struct soap*, struct ns__GetUsersList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetUsersList(struct soap*, const struct ns__GetUsersList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetUsersList(struct soap*, const char*, int, const struct ns__GetUsersList *, const char*);
SOAP_FMAC3 struct ns__GetUsersList * SOAP_FMAC4 soap_in_ns__GetUsersList(struct soap*, const char*, struct ns__GetUsersList *, const char*);
SOAP_FMAC1 struct ns__GetUsersList * SOAP_FMAC2 soap_instantiate_ns__GetUsersList(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetUsersList * soap_new_ns__GetUsersList(struct soap *soap, int n = -1) { return soap_instantiate_ns__GetUsersList(soap, n, NULL, NULL, NULL); }

inline struct ns__GetUsersList * soap_new_req_ns__GetUsersList(
	struct soap *soap,
	const ns__User& requestUserInfo)
{	struct ns__GetUsersList *_p = soap_new_ns__GetUsersList(soap);
	if (_p)
	{	soap_default_ns__GetUsersList(soap, _p);
		_p->requestUserInfo = requestUserInfo;
	}
	return _p;
}

inline struct ns__GetUsersList * soap_new_set_ns__GetUsersList(
	struct soap *soap,
	const ns__User& requestUserInfo)
{	struct ns__GetUsersList *_p = soap_new_ns__GetUsersList(soap);
	if (_p)
	{	soap_default_ns__GetUsersList(soap, _p);
		_p->requestUserInfo = requestUserInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetUsersList(struct soap*, const struct ns__GetUsersList *, const char*, const char*);

#ifndef soap_write_ns__GetUsersList
#define soap_write_ns__GetUsersList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__GetUsersList(soap, data), 0) || soap_put_ns__GetUsersList(soap, data, "ns:GetUsersList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__GetUsersList * SOAP_FMAC4 soap_get_ns__GetUsersList(struct soap*, struct ns__GetUsersList *, const char*, const char*);

#ifndef soap_read_ns__GetUsersList
#define soap_read_ns__GetUsersList(soap, data) ( ((data) ? (soap_default_ns__GetUsersList(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__GetUsersList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__GetAllDeviceList
#define SOAP_TYPE_ns__GetAllDeviceList (82)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetAllDeviceList(struct soap*, struct ns__GetAllDeviceList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetAllDeviceList(struct soap*, const struct ns__GetAllDeviceList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetAllDeviceList(struct soap*, const char*, int, const struct ns__GetAllDeviceList *, const char*);
SOAP_FMAC3 struct ns__GetAllDeviceList * SOAP_FMAC4 soap_in_ns__GetAllDeviceList(struct soap*, const char*, struct ns__GetAllDeviceList *, const char*);
SOAP_FMAC1 struct ns__GetAllDeviceList * SOAP_FMAC2 soap_instantiate_ns__GetAllDeviceList(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetAllDeviceList * soap_new_ns__GetAllDeviceList(struct soap *soap, int n = -1) { return soap_instantiate_ns__GetAllDeviceList(soap, n, NULL, NULL, NULL); }

inline struct ns__GetAllDeviceList * soap_new_req_ns__GetAllDeviceList(
	struct soap *soap,
	const ns__User& requestUserInfo)
{	struct ns__GetAllDeviceList *_p = soap_new_ns__GetAllDeviceList(soap);
	if (_p)
	{	soap_default_ns__GetAllDeviceList(soap, _p);
		_p->requestUserInfo = requestUserInfo;
	}
	return _p;
}

inline struct ns__GetAllDeviceList * soap_new_set_ns__GetAllDeviceList(
	struct soap *soap,
	const ns__User& requestUserInfo)
{	struct ns__GetAllDeviceList *_p = soap_new_ns__GetAllDeviceList(soap);
	if (_p)
	{	soap_default_ns__GetAllDeviceList(soap, _p);
		_p->requestUserInfo = requestUserInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetAllDeviceList(struct soap*, const struct ns__GetAllDeviceList *, const char*, const char*);

#ifndef soap_write_ns__GetAllDeviceList
#define soap_write_ns__GetAllDeviceList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__GetAllDeviceList(soap, data), 0) || soap_put_ns__GetAllDeviceList(soap, data, "ns:GetAllDeviceList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__GetAllDeviceList * SOAP_FMAC4 soap_get_ns__GetAllDeviceList(struct soap*, struct ns__GetAllDeviceList *, const char*, const char*);

#ifndef soap_read_ns__GetAllDeviceList
#define soap_read_ns__GetAllDeviceList(soap, data) ( ((data) ? (soap_default_ns__GetAllDeviceList(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__GetAllDeviceList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__GetUserDeviceList
#define SOAP_TYPE_ns__GetUserDeviceList (80)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetUserDeviceList(struct soap*, struct ns__GetUserDeviceList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetUserDeviceList(struct soap*, const struct ns__GetUserDeviceList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetUserDeviceList(struct soap*, const char*, int, const struct ns__GetUserDeviceList *, const char*);
SOAP_FMAC3 struct ns__GetUserDeviceList * SOAP_FMAC4 soap_in_ns__GetUserDeviceList(struct soap*, const char*, struct ns__GetUserDeviceList *, const char*);
SOAP_FMAC1 struct ns__GetUserDeviceList * SOAP_FMAC2 soap_instantiate_ns__GetUserDeviceList(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetUserDeviceList * soap_new_ns__GetUserDeviceList(struct soap *soap, int n = -1) { return soap_instantiate_ns__GetUserDeviceList(soap, n, NULL, NULL, NULL); }

inline struct ns__GetUserDeviceList * soap_new_req_ns__GetUserDeviceList(
	struct soap *soap,
	const ns__User& requestUserInfo)
{	struct ns__GetUserDeviceList *_p = soap_new_ns__GetUserDeviceList(soap);
	if (_p)
	{	soap_default_ns__GetUserDeviceList(soap, _p);
		_p->requestUserInfo = requestUserInfo;
	}
	return _p;
}

inline struct ns__GetUserDeviceList * soap_new_set_ns__GetUserDeviceList(
	struct soap *soap,
	const ns__User& requestUserInfo)
{	struct ns__GetUserDeviceList *_p = soap_new_ns__GetUserDeviceList(soap);
	if (_p)
	{	soap_default_ns__GetUserDeviceList(soap, _p);
		_p->requestUserInfo = requestUserInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetUserDeviceList(struct soap*, const struct ns__GetUserDeviceList *, const char*, const char*);

#ifndef soap_write_ns__GetUserDeviceList
#define soap_write_ns__GetUserDeviceList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__GetUserDeviceList(soap, data), 0) || soap_put_ns__GetUserDeviceList(soap, data, "ns:GetUserDeviceList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__GetUserDeviceList * SOAP_FMAC4 soap_get_ns__GetUserDeviceList(struct soap*, struct ns__GetUserDeviceList *, const char*, const char*);

#ifndef soap_read_ns__GetUserDeviceList
#define soap_read_ns__GetUserDeviceList(soap, data) ( ((data) ? (soap_default_ns__GetUserDeviceList(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__GetUserDeviceList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__Login
#define SOAP_TYPE_ns__Login (78)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__Login(struct soap*, struct ns__Login *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__Login(struct soap*, const struct ns__Login *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Login(struct soap*, const char*, int, const struct ns__Login *, const char*);
SOAP_FMAC3 struct ns__Login * SOAP_FMAC4 soap_in_ns__Login(struct soap*, const char*, struct ns__Login *, const char*);
SOAP_FMAC1 struct ns__Login * SOAP_FMAC2 soap_instantiate_ns__Login(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__Login * soap_new_ns__Login(struct soap *soap, int n = -1) { return soap_instantiate_ns__Login(soap, n, NULL, NULL, NULL); }

inline struct ns__Login * soap_new_req_ns__Login(
	struct soap *soap,
	const ns__User& requestUserInfo)
{	struct ns__Login *_p = soap_new_ns__Login(soap);
	if (_p)
	{	soap_default_ns__Login(soap, _p);
		_p->requestUserInfo = requestUserInfo;
	}
	return _p;
}

inline struct ns__Login * soap_new_set_ns__Login(
	struct soap *soap,
	const ns__User& requestUserInfo)
{	struct ns__Login *_p = soap_new_ns__Login(soap);
	if (_p)
	{	soap_default_ns__Login(soap, _p);
		_p->requestUserInfo = requestUserInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__Login(struct soap*, const struct ns__Login *, const char*, const char*);

#ifndef soap_write_ns__Login
#define soap_write_ns__Login(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__Login(soap, data), 0) || soap_put_ns__Login(soap, data, "ns:Login", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__Login * SOAP_FMAC4 soap_get_ns__Login(struct soap*, struct ns__Login *, const char*, const char*);

#ifndef soap_read_ns__Login
#define soap_read_ns__Login(soap, data) ( ((data) ? (soap_default_ns__Login(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__Login(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__DeleteDevices
#define SOAP_TYPE_ns__DeleteDevices (75)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__DeleteDevices(struct soap*, struct ns__DeleteDevices *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__DeleteDevices(struct soap*, const struct ns__DeleteDevices *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DeleteDevices(struct soap*, const char*, int, const struct ns__DeleteDevices *, const char*);
SOAP_FMAC3 struct ns__DeleteDevices * SOAP_FMAC4 soap_in_ns__DeleteDevices(struct soap*, const char*, struct ns__DeleteDevices *, const char*);
SOAP_FMAC1 struct ns__DeleteDevices * SOAP_FMAC2 soap_instantiate_ns__DeleteDevices(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__DeleteDevices * soap_new_ns__DeleteDevices(struct soap *soap, int n = -1) { return soap_instantiate_ns__DeleteDevices(soap, n, NULL, NULL, NULL); }

inline struct ns__DeleteDevices * soap_new_req_ns__DeleteDevices(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const std::vector<ns__Device> & requestDeviceList)
{	struct ns__DeleteDevices *_p = soap_new_ns__DeleteDevices(soap);
	if (_p)
	{	soap_default_ns__DeleteDevices(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestDeviceList = requestDeviceList;
	}
	return _p;
}

inline struct ns__DeleteDevices * soap_new_set_ns__DeleteDevices(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const std::vector<ns__Device> & requestDeviceList)
{	struct ns__DeleteDevices *_p = soap_new_ns__DeleteDevices(soap);
	if (_p)
	{	soap_default_ns__DeleteDevices(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestDeviceList = requestDeviceList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__DeleteDevices(struct soap*, const struct ns__DeleteDevices *, const char*, const char*);

#ifndef soap_write_ns__DeleteDevices
#define soap_write_ns__DeleteDevices(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__DeleteDevices(soap, data), 0) || soap_put_ns__DeleteDevices(soap, data, "ns:DeleteDevices", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__DeleteDevices * SOAP_FMAC4 soap_get_ns__DeleteDevices(struct soap*, struct ns__DeleteDevices *, const char*, const char*);

#ifndef soap_read_ns__DeleteDevices
#define soap_read_ns__DeleteDevices(soap, data) ( ((data) ? (soap_default_ns__DeleteDevices(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__DeleteDevices(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__SetAllDeviceSetting
#define SOAP_TYPE_ns__SetAllDeviceSetting (73)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SetAllDeviceSetting(struct soap*, struct ns__SetAllDeviceSetting *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SetAllDeviceSetting(struct soap*, const struct ns__SetAllDeviceSetting *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SetAllDeviceSetting(struct soap*, const char*, int, const struct ns__SetAllDeviceSetting *, const char*);
SOAP_FMAC3 struct ns__SetAllDeviceSetting * SOAP_FMAC4 soap_in_ns__SetAllDeviceSetting(struct soap*, const char*, struct ns__SetAllDeviceSetting *, const char*);
SOAP_FMAC1 struct ns__SetAllDeviceSetting * SOAP_FMAC2 soap_instantiate_ns__SetAllDeviceSetting(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__SetAllDeviceSetting * soap_new_ns__SetAllDeviceSetting(struct soap *soap, int n = -1) { return soap_instantiate_ns__SetAllDeviceSetting(soap, n, NULL, NULL, NULL); }

inline struct ns__SetAllDeviceSetting * soap_new_req_ns__SetAllDeviceSetting(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const std::vector<ns__Device> & requestDeviceInfo)
{	struct ns__SetAllDeviceSetting *_p = soap_new_ns__SetAllDeviceSetting(soap);
	if (_p)
	{	soap_default_ns__SetAllDeviceSetting(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestDeviceInfo = requestDeviceInfo;
	}
	return _p;
}

inline struct ns__SetAllDeviceSetting * soap_new_set_ns__SetAllDeviceSetting(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const std::vector<ns__Device> & requestDeviceInfo)
{	struct ns__SetAllDeviceSetting *_p = soap_new_ns__SetAllDeviceSetting(soap);
	if (_p)
	{	soap_default_ns__SetAllDeviceSetting(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestDeviceInfo = requestDeviceInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SetAllDeviceSetting(struct soap*, const struct ns__SetAllDeviceSetting *, const char*, const char*);

#ifndef soap_write_ns__SetAllDeviceSetting
#define soap_write_ns__SetAllDeviceSetting(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__SetAllDeviceSetting(soap, data), 0) || soap_put_ns__SetAllDeviceSetting(soap, data, "ns:SetAllDeviceSetting", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__SetAllDeviceSetting * SOAP_FMAC4 soap_get_ns__SetAllDeviceSetting(struct soap*, struct ns__SetAllDeviceSetting *, const char*, const char*);

#ifndef soap_read_ns__SetAllDeviceSetting
#define soap_read_ns__SetAllDeviceSetting(soap, data) ( ((data) ? (soap_default_ns__SetAllDeviceSetting(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__SetAllDeviceSetting(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__SetAllDeviceSettingResponse
#define SOAP_TYPE_ns__SetAllDeviceSettingResponse (72)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SetAllDeviceSettingResponse(struct soap*, struct ns__SetAllDeviceSettingResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SetAllDeviceSettingResponse(struct soap*, const struct ns__SetAllDeviceSettingResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SetAllDeviceSettingResponse(struct soap*, const char*, int, const struct ns__SetAllDeviceSettingResponse *, const char*);
SOAP_FMAC3 struct ns__SetAllDeviceSettingResponse * SOAP_FMAC4 soap_in_ns__SetAllDeviceSettingResponse(struct soap*, const char*, struct ns__SetAllDeviceSettingResponse *, const char*);
SOAP_FMAC1 struct ns__SetAllDeviceSettingResponse * SOAP_FMAC2 soap_instantiate_ns__SetAllDeviceSettingResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__SetAllDeviceSettingResponse * soap_new_ns__SetAllDeviceSettingResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__SetAllDeviceSettingResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__SetAllDeviceSettingResponse * soap_new_req_ns__SetAllDeviceSettingResponse(
	struct soap *soap,
	const std::vector<ns__ErrorCode> & responseErrorInfo)
{	struct ns__SetAllDeviceSettingResponse *_p = soap_new_ns__SetAllDeviceSettingResponse(soap);
	if (_p)
	{	soap_default_ns__SetAllDeviceSettingResponse(soap, _p);
		_p->responseErrorInfo = responseErrorInfo;
	}
	return _p;
}

inline struct ns__SetAllDeviceSettingResponse * soap_new_set_ns__SetAllDeviceSettingResponse(
	struct soap *soap,
	const std::vector<ns__ErrorCode> & responseErrorInfo)
{	struct ns__SetAllDeviceSettingResponse *_p = soap_new_ns__SetAllDeviceSettingResponse(soap);
	if (_p)
	{	soap_default_ns__SetAllDeviceSettingResponse(soap, _p);
		_p->responseErrorInfo = responseErrorInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SetAllDeviceSettingResponse(struct soap*, const struct ns__SetAllDeviceSettingResponse *, const char*, const char*);

#ifndef soap_write_ns__SetAllDeviceSettingResponse
#define soap_write_ns__SetAllDeviceSettingResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__SetAllDeviceSettingResponse(soap, data), 0) || soap_put_ns__SetAllDeviceSettingResponse(soap, data, "ns:SetAllDeviceSettingResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__SetAllDeviceSettingResponse * SOAP_FMAC4 soap_get_ns__SetAllDeviceSettingResponse(struct soap*, struct ns__SetAllDeviceSettingResponse *, const char*, const char*);

#ifndef soap_read_ns__SetAllDeviceSettingResponse
#define soap_read_ns__SetAllDeviceSettingResponse(soap, data) ( ((data) ? (soap_default_ns__SetAllDeviceSettingResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__SetAllDeviceSettingResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__SetDeviceSetting
#define SOAP_TYPE_ns__SetDeviceSetting (68)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SetDeviceSetting(struct soap*, struct ns__SetDeviceSetting *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SetDeviceSetting(struct soap*, const struct ns__SetDeviceSetting *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SetDeviceSetting(struct soap*, const char*, int, const struct ns__SetDeviceSetting *, const char*);
SOAP_FMAC3 struct ns__SetDeviceSetting * SOAP_FMAC4 soap_in_ns__SetDeviceSetting(struct soap*, const char*, struct ns__SetDeviceSetting *, const char*);
SOAP_FMAC1 struct ns__SetDeviceSetting * SOAP_FMAC2 soap_instantiate_ns__SetDeviceSetting(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__SetDeviceSetting * soap_new_ns__SetDeviceSetting(struct soap *soap, int n = -1) { return soap_instantiate_ns__SetDeviceSetting(soap, n, NULL, NULL, NULL); }

inline struct ns__SetDeviceSetting * soap_new_req_ns__SetDeviceSetting(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__Device& requestDeviceInfo)
{	struct ns__SetDeviceSetting *_p = soap_new_ns__SetDeviceSetting(soap);
	if (_p)
	{	soap_default_ns__SetDeviceSetting(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestDeviceInfo = requestDeviceInfo;
	}
	return _p;
}

inline struct ns__SetDeviceSetting * soap_new_set_ns__SetDeviceSetting(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__Device& requestDeviceInfo)
{	struct ns__SetDeviceSetting *_p = soap_new_ns__SetDeviceSetting(soap);
	if (_p)
	{	soap_default_ns__SetDeviceSetting(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestDeviceInfo = requestDeviceInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SetDeviceSetting(struct soap*, const struct ns__SetDeviceSetting *, const char*, const char*);

#ifndef soap_write_ns__SetDeviceSetting
#define soap_write_ns__SetDeviceSetting(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__SetDeviceSetting(soap, data), 0) || soap_put_ns__SetDeviceSetting(soap, data, "ns:SetDeviceSetting", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__SetDeviceSetting * SOAP_FMAC4 soap_get_ns__SetDeviceSetting(struct soap*, struct ns__SetDeviceSetting *, const char*, const char*);

#ifndef soap_read_ns__SetDeviceSetting
#define soap_read_ns__SetDeviceSetting(soap, data) ( ((data) ? (soap_default_ns__SetDeviceSetting(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__SetDeviceSetting(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__GetAllDeviceStatus
#define SOAP_TYPE_ns__GetAllDeviceStatus (65)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetAllDeviceStatus(struct soap*, struct ns__GetAllDeviceStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetAllDeviceStatus(struct soap*, const struct ns__GetAllDeviceStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetAllDeviceStatus(struct soap*, const char*, int, const struct ns__GetAllDeviceStatus *, const char*);
SOAP_FMAC3 struct ns__GetAllDeviceStatus * SOAP_FMAC4 soap_in_ns__GetAllDeviceStatus(struct soap*, const char*, struct ns__GetAllDeviceStatus *, const char*);
SOAP_FMAC1 struct ns__GetAllDeviceStatus * SOAP_FMAC2 soap_instantiate_ns__GetAllDeviceStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetAllDeviceStatus * soap_new_ns__GetAllDeviceStatus(struct soap *soap, int n = -1) { return soap_instantiate_ns__GetAllDeviceStatus(soap, n, NULL, NULL, NULL); }

inline struct ns__GetAllDeviceStatus * soap_new_req_ns__GetAllDeviceStatus(
	struct soap *soap,
	const ns__User& requestUserInfo)
{	struct ns__GetAllDeviceStatus *_p = soap_new_ns__GetAllDeviceStatus(soap);
	if (_p)
	{	soap_default_ns__GetAllDeviceStatus(soap, _p);
		_p->requestUserInfo = requestUserInfo;
	}
	return _p;
}

inline struct ns__GetAllDeviceStatus * soap_new_set_ns__GetAllDeviceStatus(
	struct soap *soap,
	const ns__User& requestUserInfo)
{	struct ns__GetAllDeviceStatus *_p = soap_new_ns__GetAllDeviceStatus(soap);
	if (_p)
	{	soap_default_ns__GetAllDeviceStatus(soap, _p);
		_p->requestUserInfo = requestUserInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetAllDeviceStatus(struct soap*, const struct ns__GetAllDeviceStatus *, const char*, const char*);

#ifndef soap_write_ns__GetAllDeviceStatus
#define soap_write_ns__GetAllDeviceStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__GetAllDeviceStatus(soap, data), 0) || soap_put_ns__GetAllDeviceStatus(soap, data, "ns:GetAllDeviceStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__GetAllDeviceStatus * SOAP_FMAC4 soap_get_ns__GetAllDeviceStatus(struct soap*, struct ns__GetAllDeviceStatus *, const char*, const char*);

#ifndef soap_read_ns__GetAllDeviceStatus
#define soap_read_ns__GetAllDeviceStatus(soap, data) ( ((data) ? (soap_default_ns__GetAllDeviceStatus(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__GetAllDeviceStatus(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__GetDeviceStatus
#define SOAP_TYPE_ns__GetDeviceStatus (62)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetDeviceStatus(struct soap*, struct ns__GetDeviceStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetDeviceStatus(struct soap*, const struct ns__GetDeviceStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetDeviceStatus(struct soap*, const char*, int, const struct ns__GetDeviceStatus *, const char*);
SOAP_FMAC3 struct ns__GetDeviceStatus * SOAP_FMAC4 soap_in_ns__GetDeviceStatus(struct soap*, const char*, struct ns__GetDeviceStatus *, const char*);
SOAP_FMAC1 struct ns__GetDeviceStatus * SOAP_FMAC2 soap_instantiate_ns__GetDeviceStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetDeviceStatus * soap_new_ns__GetDeviceStatus(struct soap *soap, int n = -1) { return soap_instantiate_ns__GetDeviceStatus(soap, n, NULL, NULL, NULL); }

inline struct ns__GetDeviceStatus * soap_new_req_ns__GetDeviceStatus(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__Device& requestDeviceInfo)
{	struct ns__GetDeviceStatus *_p = soap_new_ns__GetDeviceStatus(soap);
	if (_p)
	{	soap_default_ns__GetDeviceStatus(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestDeviceInfo = requestDeviceInfo;
	}
	return _p;
}

inline struct ns__GetDeviceStatus * soap_new_set_ns__GetDeviceStatus(
	struct soap *soap,
	const ns__User& requestUserInfo,
	const ns__Device& requestDeviceInfo)
{	struct ns__GetDeviceStatus *_p = soap_new_ns__GetDeviceStatus(soap);
	if (_p)
	{	soap_default_ns__GetDeviceStatus(soap, _p);
		_p->requestUserInfo = requestUserInfo;
		_p->requestDeviceInfo = requestDeviceInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetDeviceStatus(struct soap*, const struct ns__GetDeviceStatus *, const char*, const char*);

#ifndef soap_write_ns__GetDeviceStatus
#define soap_write_ns__GetDeviceStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__GetDeviceStatus(soap, data), 0) || soap_put_ns__GetDeviceStatus(soap, data, "ns:GetDeviceStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__GetDeviceStatus * SOAP_FMAC4 soap_get_ns__GetDeviceStatus(struct soap*, struct ns__GetDeviceStatus *, const char*, const char*);

#ifndef soap_read_ns__GetDeviceStatus
#define soap_read_ns__GetDeviceStatus(soap, data) ( ((data) ? (soap_default_ns__GetDeviceStatus(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns__GetDeviceStatus(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (9)
#endif
SOAP_FMAC1 void SOAP_FMAC2 soap_default_xsd__dateTime(struct soap*, struct tm *);
SOAP_FMAC1 void SOAP_FMAC2 soap_serialize_xsd__dateTime(struct soap*, const struct tm *);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__dateTime2s(struct soap*, struct tm);
SOAP_FMAC1 int SOAP_FMAC2 soap_out_xsd__dateTime(struct soap*, const char*, int, const struct tm *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__dateTime(struct soap*, const char*, struct tm *);
SOAP_FMAC1 struct tm * SOAP_FMAC2 soap_in_xsd__dateTime(struct soap*, const char*, struct tm *, const char*);
SOAP_FMAC1 struct tm * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap*, int, const char*, const char*, size_t*);

inline struct tm * soap_new_xsd__dateTime(struct soap *soap, int n = -1) { return soap_instantiate_xsd__dateTime(soap, n, NULL, NULL, NULL); }

inline struct tm * soap_new_req_xsd__dateTime(
	struct soap *soap,
	int tm_isdst)
{	struct tm *_p = soap_new_xsd__dateTime(soap);
	if (_p)
	{	
		_p->tm_isdst = tm_isdst;
	}
	return _p;
}

inline struct tm * soap_new_set_xsd__dateTime(
	struct soap *soap,
	int tm_sec,
	int tm_min,
	int tm_hour,
	int tm_mday,
	int tm_mon,
	int tm_year,
	int tm_isdst)
{	struct tm *_p = soap_new_xsd__dateTime(soap);
	if (_p)
	{	
		_p->tm_sec = tm_sec;
		_p->tm_min = tm_min;
		_p->tm_hour = tm_hour;
		_p->tm_mday = tm_mday;
		_p->tm_mon = tm_mon;
		_p->tm_year = tm_year;
		_p->tm_isdst = tm_isdst;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__dateTime(struct soap*, const struct tm *, const char*, const char*);

#ifndef soap_write_xsd__dateTime
#define soap_write_xsd__dateTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__dateTime(soap, data), 0) || soap_put_xsd__dateTime(soap, data, "xsd:dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct tm * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap*, struct tm *, const char*, const char*);

#ifndef soap_read_xsd__dateTime
#define soap_read_xsd__dateTime(soap, data) ( ((data) ? (soap_default_xsd__dateTime(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_xsd__dateTime(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tm
#define SOAP_TYPE_tm (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tm(struct soap*, struct tm *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tm(struct soap*, const struct tm *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tm(struct soap*, const char*, int, const struct tm *, const char*);
SOAP_FMAC3 struct tm * SOAP_FMAC4 soap_in_tm(struct soap*, const char*, struct tm *, const char*);
SOAP_FMAC1 struct tm * SOAP_FMAC2 soap_instantiate_tm(struct soap*, int, const char*, const char*, size_t*);

inline struct tm * soap_new_tm(struct soap *soap, int n = -1) { return soap_instantiate_tm(soap, n, NULL, NULL, NULL); }

inline struct tm * soap_new_req_tm(
	struct soap *soap,
	int tm_isdst)
{	struct tm *_p = soap_new_tm(soap);
	if (_p)
	{	soap_default_tm(soap, _p);
		_p->tm_isdst = tm_isdst;
	}
	return _p;
}

inline struct tm * soap_new_set_tm(
	struct soap *soap,
	int tm_sec,
	int tm_min,
	int tm_hour,
	int tm_mday,
	int tm_mon,
	int tm_year,
	int tm_isdst)
{	struct tm *_p = soap_new_tm(soap);
	if (_p)
	{	soap_default_tm(soap, _p);
		_p->tm_sec = tm_sec;
		_p->tm_min = tm_min;
		_p->tm_hour = tm_hour;
		_p->tm_mday = tm_mday;
		_p->tm_mon = tm_mon;
		_p->tm_year = tm_year;
		_p->tm_isdst = tm_isdst;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tm(struct soap*, const struct tm *, const char*, const char*);

#ifndef soap_write_tm
#define soap_write_tm(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tm(soap, data), 0) || soap_put_tm(soap, data, "tm", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct tm * SOAP_FMAC4 soap_get_tm(struct soap*, struct tm *, const char*, const char*);

#ifndef soap_read_tm
#define soap_read_tm(soap, data) ( ((data) ? (soap_default_tm(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_tm(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (144)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data), 0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( ((data) ? (soap_default_PointerToSOAP_ENV__Reason(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (143)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data), 0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( ((data) ? (soap_default_PointerToSOAP_ENV__Detail(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (137)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data), 0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( ((data) ? (soap_default_PointerToSOAP_ENV__Code(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data), 0) || soap_put__QName(soap, data, "QName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( ((data) ? (soap_default__QName(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__QName(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data), 0) || soap_put_string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( ((data) ? (soap_default_string(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_string(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__vectorTemplateOfns__UserLog
#define SOAP_TYPE_std__vectorTemplateOfns__UserLog (107)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__UserLog(struct soap*, std::vector<ns__UserLog> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__UserLog(struct soap*, const std::vector<ns__UserLog> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__UserLog(struct soap*, const char*, int, const std::vector<ns__UserLog> *, const char*);
SOAP_FMAC3 std::vector<ns__UserLog> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns__UserLog(struct soap*, const char*, std::vector<ns__UserLog> *, const char*);
SOAP_FMAC1 std::vector<ns__UserLog>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns__UserLog(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__UserLog>  * soap_new_std__vectorTemplateOfns__UserLog(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns__UserLog(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_std__vectorTemplateOfns__ActivityLog
#define SOAP_TYPE_std__vectorTemplateOfns__ActivityLog (100)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__ActivityLog(struct soap*, std::vector<ns__ActivityLog> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__ActivityLog(struct soap*, const std::vector<ns__ActivityLog> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__ActivityLog(struct soap*, const char*, int, const std::vector<ns__ActivityLog> *, const char*);
SOAP_FMAC3 std::vector<ns__ActivityLog> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns__ActivityLog(struct soap*, const char*, std::vector<ns__ActivityLog> *, const char*);
SOAP_FMAC1 std::vector<ns__ActivityLog>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns__ActivityLog(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__ActivityLog>  * soap_new_std__vectorTemplateOfns__ActivityLog(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns__ActivityLog(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_std__vectorTemplateOfns__ErrorCode
#define SOAP_TYPE_std__vectorTemplateOfns__ErrorCode (69)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__ErrorCode(struct soap*, std::vector<ns__ErrorCode> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__ErrorCode(struct soap*, const std::vector<ns__ErrorCode> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__ErrorCode(struct soap*, const char*, int, const std::vector<ns__ErrorCode> *, const char*);
SOAP_FMAC3 std::vector<ns__ErrorCode> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns__ErrorCode(struct soap*, const char*, std::vector<ns__ErrorCode> *, const char*);
SOAP_FMAC1 std::vector<ns__ErrorCode>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns__ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__ErrorCode>  * soap_new_std__vectorTemplateOfns__ErrorCode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns__ErrorCode(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_std__vectorTemplateOfns__CityLocation
#define SOAP_TYPE_std__vectorTemplateOfns__CityLocation (59)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__CityLocation(struct soap*, std::vector<ns__CityLocation> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__CityLocation(struct soap*, const std::vector<ns__CityLocation> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__CityLocation(struct soap*, const char*, int, const std::vector<ns__CityLocation> *, const char*);
SOAP_FMAC3 std::vector<ns__CityLocation> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns__CityLocation(struct soap*, const char*, std::vector<ns__CityLocation> *, const char*);
SOAP_FMAC1 std::vector<ns__CityLocation>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns__CityLocation(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__CityLocation>  * soap_new_std__vectorTemplateOfns__CityLocation(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns__CityLocation(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__string
#define SOAP_TYPE_std__vectorTemplateOfxsd__string (57)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__string(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__string(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__string(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__string(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfxsd__string(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxsd__string(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_std__vectorTemplateOfns__DeviceRules
#define SOAP_TYPE_std__vectorTemplateOfns__DeviceRules (52)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__DeviceRules(struct soap*, std::vector<ns__DeviceRules> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__DeviceRules(struct soap*, const std::vector<ns__DeviceRules> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__DeviceRules(struct soap*, const char*, int, const std::vector<ns__DeviceRules> *, const char*);
SOAP_FMAC3 std::vector<ns__DeviceRules> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns__DeviceRules(struct soap*, const char*, std::vector<ns__DeviceRules> *, const char*);
SOAP_FMAC1 std::vector<ns__DeviceRules>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns__DeviceRules(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__DeviceRules>  * soap_new_std__vectorTemplateOfns__DeviceRules(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns__DeviceRules(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string
#define SOAP_TYPE_std__vectorTemplateOfstd__string (48)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_std__vectorTemplateOfns__Device
#define SOAP_TYPE_std__vectorTemplateOfns__Device (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__Device(struct soap*, std::vector<ns__Device> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__Device(struct soap*, const std::vector<ns__Device> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__Device(struct soap*, const char*, int, const std::vector<ns__Device> *, const char*);
SOAP_FMAC3 std::vector<ns__Device> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns__Device(struct soap*, const char*, std::vector<ns__Device> *, const char*);
SOAP_FMAC1 std::vector<ns__Device>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns__Device(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__Device>  * soap_new_std__vectorTemplateOfns__Device(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns__Device(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_std__vectorTemplateOfns__DeviceStatusLog
#define SOAP_TYPE_std__vectorTemplateOfns__DeviceStatusLog (45)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__DeviceStatusLog(struct soap*, std::vector<ns__DeviceStatusLog> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__DeviceStatusLog(struct soap*, const std::vector<ns__DeviceStatusLog> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__DeviceStatusLog(struct soap*, const char*, int, const std::vector<ns__DeviceStatusLog> *, const char*);
SOAP_FMAC3 std::vector<ns__DeviceStatusLog> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns__DeviceStatusLog(struct soap*, const char*, std::vector<ns__DeviceStatusLog> *, const char*);
SOAP_FMAC1 std::vector<ns__DeviceStatusLog>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns__DeviceStatusLog(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__DeviceStatusLog>  * soap_new_std__vectorTemplateOfns__DeviceStatusLog(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns__DeviceStatusLog(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_std__vectorTemplateOfns__Sensor
#define SOAP_TYPE_std__vectorTemplateOfns__Sensor (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__Sensor(struct soap*, std::vector<ns__Sensor> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__Sensor(struct soap*, const std::vector<ns__Sensor> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__Sensor(struct soap*, const char*, int, const std::vector<ns__Sensor> *, const char*);
SOAP_FMAC3 std::vector<ns__Sensor> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns__Sensor(struct soap*, const char*, std::vector<ns__Sensor> *, const char*);
SOAP_FMAC1 std::vector<ns__Sensor>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns__Sensor(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__Sensor>  * soap_new_std__vectorTemplateOfns__Sensor(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns__Sensor(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__long
#define SOAP_TYPE_std__vectorTemplateOfxsd__long (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__long(struct soap*, std::vector<LONG64> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__long(struct soap*, const std::vector<LONG64> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__long(struct soap*, const char*, int, const std::vector<LONG64> *, const char*);
SOAP_FMAC3 std::vector<LONG64> * SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__long(struct soap*, const char*, std::vector<LONG64> *, const char*);
SOAP_FMAC1 std::vector<LONG64>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__long(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<LONG64>  * soap_new_std__vectorTemplateOfxsd__long(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxsd__long(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_std__vectorTemplateOfns__User
#define SOAP_TYPE_std__vectorTemplateOfns__User (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__User(struct soap*, std::vector<ns__User> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__User(struct soap*, const std::vector<ns__User> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__User(struct soap*, const char*, int, const std::vector<ns__User> *, const char*);
SOAP_FMAC3 std::vector<ns__User> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns__User(struct soap*, const char*, std::vector<ns__User> *, const char*);
SOAP_FMAC1 std::vector<ns__User>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns__User(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__User>  * soap_new_std__vectorTemplateOfns__User(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns__User(soap, n, NULL, NULL, NULL); }

#endif

/* End of Server_SoapH.h */
