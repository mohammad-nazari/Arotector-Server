/*
 *	 Protector.cpp
 *	 Generated by sql2class v1.8 by (C) AH 2000-2006
 *	  using command line
 *	  $ sql2class -build -lib Protector envprotector.sql -namespace db -overwrite
 *	 Date: Fri Feb 13 10:59:04 2015
 */

/*
Copyright (C) 2001-2006  Anders Hedstrom (grymse@alhem.net)

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*/
#ifdef WIN32
#include <winsock.h>
#endif
#include "Protector.h"

namespace db {

/**
 **  Begin class 'Device'
 **/

Device::Device(Database *db):devsimcardtype(mmap_devsimcardtype)
{
	database = db;
	new_object = 1;
	clear();
}


Device::Device(Database *db,const std::string& sql):devsimcardtype(mmap_devsimcardtype)
{
	database = db;
	new_object = 1;
	spawn(sql);
}


Device::Device(Database *db,Query *qd,int offset):devsimcardtype(mmap_devsimcardtype)
{
	database = db;
	new_object = 0;
	spawn(qd, offset);
}


Device::Device(Database& db,uint64_t i_devserialnumber):devsimcardtype(mmap_devsimcardtype),database(&db),new_object(1)
{
	Query q(*database);
	std::string sql = "select * from device where ";
	{
		char slask[100];
		sprintf(slask,"DevSerialNumber='%llu'",i_devserialnumber);
		sql += slask;
	}
	spawn(sql);
}


Device::~Device()
{
}


void Device::select(const std::string& sql)
{
	spawn(sql);
}


unsigned __int64 Device::insert()
{
	Query q(*database);
	std::string sql;

	sql = "insert into device(DevSerialNumber,DevName,DevCity,DevLocation,DevSocketNumber,DevIP,DevPort,DevStatus,DevSimcardNumber,DevSimcardType)";
	{
		char slask[100];
		sprintf(slask," values(%llu",this -> devserialnumber);
		sql += slask;
	}
	sql += ", '" + q.GetDatabase().safestr(this -> devname) + "'";
	sql += ", '" + q.GetDatabase().safestr(this -> devcity) + "'";
	sql += ", '" + q.GetDatabase().safestr(this -> devlocation) + "'";
	{
		char slask[100];
		sprintf(slask,", %ld",this -> devsocketnumber);
		sql += slask;
	}
	sql += ", '" + q.GetDatabase().safestr(this -> devip) + "'";
	{
		char slask[100];
		sprintf(slask,", %ld",this -> devport);
		sql += slask;
	}
	{
		char slask[100];
		sprintf(slask,", %d",this -> devstatus);
		sql += slask;
	}
	{
		char slask[100];
		sprintf(slask,", %llu",this -> devsimcardnumber);
		sql += slask;
	}
	sql += ", '" + q.GetDatabase().safestr(this -> devsimcardtype.String()) + "'";
	sql += ")";
	q.execute(sql);
	new_object = 0;
	unsigned __int64 inserted_id = q.insert_id();
	devserialnumber = inserted_id;
	return inserted_id;
}


void Device::update()
{
	update(this -> devserialnumber);
}


void Device::update(uint64_t i_devserialnumber)
{
	Query q(*database);
	std::string sql;
	{
		char slask[200];
		sprintf(slask,"update device set DevSerialNumber=%llu",this -> devserialnumber);
		sql += slask;
	}
	sql += ", DevName='" + q.GetDatabase().safestr(this -> devname) + "'";
	sql += ", DevCity='" + q.GetDatabase().safestr(this -> devcity) + "'";
	sql += ", DevLocation='" + q.GetDatabase().safestr(this -> devlocation) + "'";
	{
		char slask[200];
		sprintf(slask,", DevSocketNumber=%ld",this -> devsocketnumber);
		sql += slask;
	}
	sql += ", DevIP='" + q.GetDatabase().safestr(this -> devip) + "'";
	{
		char slask[200];
		sprintf(slask,", DevPort=%ld",this -> devport);
		sql += slask;
	}
	{
		char slask[200];
		sprintf(slask,", DevStatus=%d",this -> devstatus);
		sql += slask;
	}
	{
		char slask[200];
		sprintf(slask,", DevSimcardNumber=%llu",this -> devsimcardnumber);
		sql += slask;
	}
	sql += ", DevSimcardType='" + q.GetDatabase().safestr(this -> devsimcardtype.String()) + "'";
	{
		char slask[200];
		sprintf(slask," where DevSerialNumber='%llu'",i_devserialnumber);
		sql += slask;
	}
	q.execute(sql);
}


void Device::save()
{
	if (new_object)
		insert();
	else
		update();
}


void Device::erase()
{
	if (!new_object)
	{
		std::string sql = "delete from device where";
		Query q(*database);
		{
			char slask[200];
			sprintf(slask," DevSerialNumber='%llu'",this -> devserialnumber);
			sql += slask;
		}
		q.execute(sql);
	}
}


std::string Device::xml()
{
	Query q(*database);
	std::string dest;
	char slask[200];
	dest = "<DEVICE>";
	sprintf(slask,"<DEVSERIALNUMBER>%llu</DEVSERIALNUMBER>",this -> devserialnumber);
	dest += slask;
	dest += "<DEVNAME>" + q.GetDatabase().xmlsafestr(this -> devname) + "</DEVNAME>";
	dest += "<DEVCITY>" + q.GetDatabase().xmlsafestr(this -> devcity) + "</DEVCITY>";
	dest += "<DEVLOCATION>" + q.GetDatabase().xmlsafestr(this -> devlocation) + "</DEVLOCATION>";
	sprintf(slask,"<DEVSOCKETNUMBER>%ld</DEVSOCKETNUMBER>",this -> devsocketnumber);
	dest += slask;
	dest += "<DEVIP>" + q.GetDatabase().xmlsafestr(this -> devip) + "</DEVIP>";
	sprintf(slask,"<DEVPORT>%ld</DEVPORT>",this -> devport);
	dest += slask;
	dest += "<DEVINSTALLDATE>" + q.GetDatabase().xmlsafestr(this -> devinstalldate) + "</DEVINSTALLDATE>";
	sprintf(slask,"<DEVSTATUS>%d</DEVSTATUS>",this -> devstatus);
	dest += slask;
	sprintf(slask,"<DEVSIMCARDNUMBER>%llu</DEVSIMCARDNUMBER>",this -> devsimcardnumber);
	dest += slask;
	dest += "<DEVSIMCARDTYPE>" + q.GetDatabase().xmlsafestr(this -> devsimcardtype.String()) + "</DEVSIMCARDTYPE>";
	dest += "</DEVICE>";
	return dest;
}


std::string Device::xml(const std::string& tag,const std::string& xvalx)
{
	Query q(*database);
	std::string dest;
	char slask[200];
	dest = "<DEVICE " + tag + "=\"" + xvalx + "\">";
	sprintf(slask,"<DEVSERIALNUMBER>%llu</DEVSERIALNUMBER>",this -> devserialnumber);
	dest += slask;
	dest += "<DEVNAME>" + q.GetDatabase().xmlsafestr(this -> devname) + "</DEVNAME>";
	dest += "<DEVCITY>" + q.GetDatabase().xmlsafestr(this -> devcity) + "</DEVCITY>";
	dest += "<DEVLOCATION>" + q.GetDatabase().xmlsafestr(this -> devlocation) + "</DEVLOCATION>";
	sprintf(slask,"<DEVSOCKETNUMBER>%ld</DEVSOCKETNUMBER>",this -> devsocketnumber);
	dest += slask;
	dest += "<DEVIP>" + q.GetDatabase().xmlsafestr(this -> devip) + "</DEVIP>";
	sprintf(slask,"<DEVPORT>%ld</DEVPORT>",this -> devport);
	dest += slask;
	dest += "<DEVINSTALLDATE>" + q.GetDatabase().xmlsafestr(this -> devinstalldate) + "</DEVINSTALLDATE>";
	sprintf(slask,"<DEVSTATUS>%d</DEVSTATUS>",this -> devstatus);
	dest += slask;
	sprintf(slask,"<DEVSIMCARDNUMBER>%llu</DEVSIMCARDNUMBER>",this -> devsimcardnumber);
	dest += slask;
	dest += "<DEVSIMCARDTYPE>" + q.GetDatabase().xmlsafestr(this -> devsimcardtype.String()) + "</DEVSIMCARDTYPE>";
	dest += "</DEVICE>";
	return dest;
}


size_t Device::num_cols()
{
	return 11;
}


void Device::clear()
{
	mmap_devsimcardtype["MCI"] = 1;
	mmap_devsimcardtype["IranCell"] = 2;
	mmap_devsimcardtype["Taliya"] = 3;
	mmap_devsimcardtype["RighTel"] = 4;
	this -> devserialnumber = 0;
	this -> devname = "";
	this -> devcity = "";
	this -> devlocation = "";
	this -> devsocketnumber = 0;
	this -> devip = "";
	this -> devport = 0;
	this -> devinstalldate = "";
	this -> devstatus = 0;
	this -> devsimcardnumber = 0;
	this -> devsimcardtype = "";
}


void Device::spawn(const std::string& sql)
{
	Query q(*database);
	std::string temp;

	clear();

	if (!strncasecmp(sql.c_str(),"select * ",9))
	{
		temp = "select DevSerialNumber,DevName,DevCity,DevLocation,DevSocketNumber,DevIP,DevPort,DevInstallDate,DevStatus,DevSimcardNumber,DevSimcardType " + sql.substr(9);
	} else
		temp = sql;
	q.get_result(temp);
	if (q.fetch_row())
	{
		this -> devserialnumber = q.getubigint(0);																				// 0 - devserialnumber bigint(20)
		this -> devname = q.getstr(1);																				// 1 - devname varchar(50)
		this -> devcity = q.getstr(2);																				// 2 - devcity varchar(50)
		this -> devlocation = q.getstr(3);																				// 3 - devlocation varchar(500)
		this -> devsocketnumber = q.getval(4);																				// 4 - devsocketnumber int(11)
		this -> devip = q.getstr(5);																				// 5 - devip varchar(30)
		this -> devport = q.getval(6);																				// 6 - devport int(11)
		this -> devinstalldate = q.getstr(7);																				// 7 - devinstalldate timestamp
		this -> devstatus = q.getval(8);																				// 8 - devstatus tinyint(1)
		this -> devsimcardnumber = q.getubigint(9);																			// 9 - devsimcardnumber bigint(10)
		this -> devsimcardtype = q.getstr(10);																				// 10 - devsimcardtype enum('MCI','IranCell','Taliya','RighTel')
		new_object = 0;
	} else
		clear();
	q.free_result();
}


void Device::spawn(Query *qd,int offset)
{
	clear();

	this -> devserialnumber = qd -> getubigint(0 + offset);																				// 0 - devserialnumber bigint(20)
	this -> devname = qd -> getstr(1 + offset);																				// 1 - devname varchar(50)
	this -> devcity = qd -> getstr(2 + offset);																				// 2 - devcity varchar(50)
	this -> devlocation = qd -> getstr(3 + offset);																				// 3 - devlocation varchar(500)
	this -> devsocketnumber = qd -> getval(4 + offset);																				// 4 - devsocketnumber int(11)
	this -> devip = qd -> getstr(5 + offset);																				// 5 - devip varchar(30)
	this -> devport = qd -> getval(6 + offset);																				// 6 - devport int(11)
	this -> devinstalldate = qd -> getstr(7 + offset);																				// 7 - devinstalldate timestamp
	this -> devstatus = qd -> getval(8 + offset);																				// 8 - devstatus tinyint(1)
	this -> devsimcardnumber = qd -> getubigint(9 + offset);																			// 9 - devsimcardnumber bigint(10)
	this -> devsimcardtype = qd -> getstr(10 + offset);																				// 10 - devsimcardtype enum('MCI','IranCell','Taliya','RighTel')
}


// End of implementation of class 'Device'

} // End of namespace
namespace db {

/**
 **  Begin class 'Logactivity'
 **/

Logactivity::Logactivity(Database *db)
{
	database = db;
	new_object = 1;
	clear();
}


Logactivity::Logactivity(Database *db,const std::string& sql)
{
	database = db;
	new_object = 1;
	spawn(sql);
}


Logactivity::Logactivity(Database *db,Query *qd,int offset)
{
	database = db;
	new_object = 0;
	spawn(qd, offset);
}


Logactivity::Logactivity(Database& db,unsigned long i_logid):database(&db),new_object(1)
{
	Query q(*database);
	std::string sql = "select * from logactivity where ";
	{
		char slask[100];
		sprintf(slask,"LogID='%lu'",i_logid);
		sql += slask;
	}
	spawn(sql);
}


Logactivity::~Logactivity()
{
}


void Logactivity::select(const std::string& sql)
{
	spawn(sql);
}


unsigned __int64 Logactivity::insert()
{
	Query q(*database);
	std::string sql;

	sql = "insert into logactivity(DevSerialNumber,UserID,DataActivity)";
	{
		char slask[100];
		sprintf(slask," values(%llu",this -> devserialnumber);
		sql += slask;
	}
	{
		char slask[100];
		sprintf(slask,", %lu",this -> userid);
		sql += slask;
	}
	sql += ", '" + q.GetDatabase().safestr(this -> dataactivity) + "'";
	sql += ")";
	q.execute(sql);
	new_object = 0;
	unsigned __int64 inserted_id = q.insert_id();
	logid = inserted_id;
	return inserted_id;
}


void Logactivity::update()
{
	update(this -> logid);
}


void Logactivity::update(unsigned long i_logid)
{
	Query q(*database);
	std::string sql;
	{
		char slask[200];
		sprintf(slask,"update logactivity set DevSerialNumber=%llu",this -> devserialnumber);
		sql += slask;
	}
	{
		char slask[200];
		sprintf(slask,", UserID=%lu",this -> userid);
		sql += slask;
	}
	sql += ", DataActivity='" + q.GetDatabase().safestr(this -> dataactivity) + "'";
	{
		char slask[200];
		sprintf(slask," where LogID='%lu'",i_logid);
		sql += slask;
	}
	q.execute(sql);
}


void Logactivity::save()
{
	if (new_object)
		insert();
	else
		update();
}


void Logactivity::erase()
{
	if (!new_object)
	{
		std::string sql = "delete from logactivity where";
		Query q(*database);
		{
			char slask[200];
			sprintf(slask," LogID='%lu'",this -> logid);
			sql += slask;
		}
		q.execute(sql);
	}
}


std::string Logactivity::xml()
{
	Query q(*database);
	std::string dest;
	char slask[200];
	dest = "<LOGACTIVITY>";
	sprintf(slask,"<LOGID>%lu</LOGID>",this -> logid);
	dest += slask;
	sprintf(slask,"<DEVSERIALNUMBER>%llu</DEVSERIALNUMBER>",this -> devserialnumber);
	dest += slask;
	sprintf(slask,"<USERID>%lu</USERID>",this -> userid);
	dest += slask;
	dest += "<DATAACTIVITY>" + q.GetDatabase().xmlsafestr(this -> dataactivity) + "</DATAACTIVITY>";
	dest += "<LOGDATE>" + q.GetDatabase().xmlsafestr(this -> logdate) + "</LOGDATE>";
	dest += "</LOGACTIVITY>";
	return dest;
}


std::string Logactivity::xml(const std::string& tag,const std::string& xvalx)
{
	Query q(*database);
	std::string dest;
	char slask[200];
	dest = "<LOGACTIVITY " + tag + "=\"" + xvalx + "\">";
	sprintf(slask,"<LOGID>%lu</LOGID>",this -> logid);
	dest += slask;
	sprintf(slask,"<DEVSERIALNUMBER>%llu</DEVSERIALNUMBER>",this -> devserialnumber);
	dest += slask;
	sprintf(slask,"<USERID>%lu</USERID>",this -> userid);
	dest += slask;
	dest += "<DATAACTIVITY>" + q.GetDatabase().xmlsafestr(this -> dataactivity) + "</DATAACTIVITY>";
	dest += "<LOGDATE>" + q.GetDatabase().xmlsafestr(this -> logdate) + "</LOGDATE>";
	dest += "</LOGACTIVITY>";
	return dest;
}


size_t Logactivity::num_cols()
{
	return 5;
}


void Logactivity::clear()
{
	this -> logid = 0;
	this -> devserialnumber = 0;
	this -> userid = 0;
	this -> dataactivity = "";
	this -> logdate = "";
}


void Logactivity::spawn(const std::string& sql)
{
	Query q(*database);
	std::string temp;

	clear();

	if (!strncasecmp(sql.c_str(),"select * ",9))
	{
		temp = "select LogID,DevSerialNumber,UserID,DataActivity,LogDate " + sql.substr(9);
	} else
		temp = sql;
	q.get_result(temp);
	if (q.fetch_row())
	{
		this -> logid = q.getuval(0);																				// 0 - logid int(10)
		this -> devserialnumber = q.getubigint(1);																				// 1 - devserialnumber bigint(20)
		this -> userid = q.getuval(2);																				// 2 - userid int(10)
		this -> dataactivity = q.getstr(3);																				// 3 - dataactivity varchar(500)
		this -> logdate = q.getstr(4);																				// 4 - logdate timestamp
		new_object = 0;
	} else
		clear();
	q.free_result();
}


void Logactivity::spawn(Query *qd,int offset)
{
	clear();

	this -> logid = qd -> getuval(0 + offset);																				// 0 - logid int(10)
	this -> devserialnumber = qd -> getubigint(1 + offset);																				// 1 - devserialnumber bigint(20)
	this -> userid = qd -> getuval(2 + offset);																				// 2 - userid int(10)
	this -> dataactivity = qd -> getstr(3 + offset);																				// 3 - dataactivity varchar(500)
	this -> logdate = qd -> getstr(4 + offset);																				// 4 - logdate timestamp
}


// End of implementation of class 'Logactivity'

} // End of namespace
namespace db {

/**
 **  Begin class 'Logstatus'
 **/

Logstatus::Logstatus(Database *db)
{
	database = db;
	new_object = 1;
	clear();
}


Logstatus::Logstatus(Database *db,const std::string& sql)
{
	database = db;
	new_object = 1;
	spawn(sql);
}


Logstatus::Logstatus(Database *db,Query *qd,int offset)
{
	database = db;
	new_object = 0;
	spawn(qd, offset);
}


Logstatus::Logstatus(Database& db,unsigned long i_logid):database(&db),new_object(1)
{
	Query q(*database);
	std::string sql = "select * from logstatus where ";
	{
		char slask[100];
		sprintf(slask,"LogID='%lu'",i_logid);
		sql += slask;
	}
	spawn(sql);
}


Logstatus::~Logstatus()
{
}


void Logstatus::select(const std::string& sql)
{
	spawn(sql);
}


unsigned __int64 Logstatus::insert()
{
	Query q(*database);
	std::string sql;

	sql = "insert into logstatus(DevSerialNumber,StatusData)";
	{
		char slask[100];
		sprintf(slask," values(%llu",this -> devserialnumber);
		sql += slask;
	}
	sql += ", '" + q.GetDatabase().safestr(this -> statusdata) + "'";
	sql += ")";
	q.execute(sql);
	new_object = 0;
	unsigned __int64 inserted_id = q.insert_id();
	logid = inserted_id;
	return inserted_id;
}


void Logstatus::update()
{
	update(this -> logid);
}


void Logstatus::update(unsigned long i_logid)
{
	Query q(*database);
	std::string sql;
	{
		char slask[200];
		sprintf(slask,"update logstatus set DevSerialNumber=%llu",this -> devserialnumber);
		sql += slask;
	}
	sql += ", StatusData='" + q.GetDatabase().safestr(this -> statusdata) + "'";
	{
		char slask[200];
		sprintf(slask," where LogID='%lu'",i_logid);
		sql += slask;
	}
	q.execute(sql);
}


void Logstatus::save()
{
	if (new_object)
		insert();
	else
		update();
}


void Logstatus::erase()
{
	if (!new_object)
	{
		std::string sql = "delete from logstatus where";
		Query q(*database);
		{
			char slask[200];
			sprintf(slask," LogID='%lu'",this -> logid);
			sql += slask;
		}
		q.execute(sql);
	}
}


std::string Logstatus::xml()
{
	Query q(*database);
	std::string dest;
	char slask[200];
	dest = "<LOGSTATUS>";
	sprintf(slask,"<LOGID>%lu</LOGID>",this -> logid);
	dest += slask;
	sprintf(slask,"<DEVSERIALNUMBER>%llu</DEVSERIALNUMBER>",this -> devserialnumber);
	dest += slask;
	dest += "<STATUSDATA>" + q.GetDatabase().xmlsafestr(this -> statusdata) + "</STATUSDATA>";
	dest += "<LOGDATE>" + q.GetDatabase().xmlsafestr(this -> logdate) + "</LOGDATE>";
	dest += "</LOGSTATUS>";
	return dest;
}


std::string Logstatus::xml(const std::string& tag,const std::string& xvalx)
{
	Query q(*database);
	std::string dest;
	char slask[200];
	dest = "<LOGSTATUS " + tag + "=\"" + xvalx + "\">";
	sprintf(slask,"<LOGID>%lu</LOGID>",this -> logid);
	dest += slask;
	sprintf(slask,"<DEVSERIALNUMBER>%llu</DEVSERIALNUMBER>",this -> devserialnumber);
	dest += slask;
	dest += "<STATUSDATA>" + q.GetDatabase().xmlsafestr(this -> statusdata) + "</STATUSDATA>";
	dest += "<LOGDATE>" + q.GetDatabase().xmlsafestr(this -> logdate) + "</LOGDATE>";
	dest += "</LOGSTATUS>";
	return dest;
}


size_t Logstatus::num_cols()
{
	return 4;
}


void Logstatus::clear()
{
	this -> logid = 0;
	this -> devserialnumber = 0;
	this -> statusdata = "";
	this -> logdate = "";
}


void Logstatus::spawn(const std::string& sql)
{
	Query q(*database);
	std::string temp;

	clear();

	if (!strncasecmp(sql.c_str(),"select * ",9))
	{
		temp = "select LogID,DevSerialNumber,StatusData,LogDate " + sql.substr(9);
	} else
		temp = sql;
	q.get_result(temp);
	if (q.fetch_row())
	{
		this -> logid = q.getuval(0);																				// 0 - logid int(10)
		this -> devserialnumber = q.getubigint(1);																				// 1 - devserialnumber bigint(20)
		this -> statusdata = q.getstr(2);																				// 2 - statusdata varchar(2048)
		this -> logdate = q.getstr(3);																				// 3 - logdate timestamp
		new_object = 0;
	} else
		clear();
	q.free_result();
}


void Logstatus::spawn(Query *qd,int offset)
{
	clear();

	this -> logid = qd -> getuval(0 + offset);																				// 0 - logid int(10)
	this -> devserialnumber = qd -> getubigint(1 + offset);																				// 1 - devserialnumber bigint(20)
	this -> statusdata = qd -> getstr(2 + offset);																				// 2 - statusdata varchar(2048)
	this -> logdate = qd -> getstr(3 + offset);																				// 3 - logdate timestamp
}


// End of implementation of class 'Logstatus'

} // End of namespace
namespace db {

/**
 **  Begin class 'Loguser'
 **/

Loguser::Loguser(Database *db)
{
	database = db;
	new_object = 1;
	clear();
}


Loguser::Loguser(Database *db,const std::string& sql)
{
	database = db;
	new_object = 1;
	spawn(sql);
}


Loguser::Loguser(Database *db,Query *qd,int offset)
{
	database = db;
	new_object = 0;
	spawn(qd, offset);
}


Loguser::Loguser(Database& db,unsigned long i_id):database(&db),new_object(1)
{
	Query q(*database);
	std::string sql = "select * from loguser where ";
	{
		char slask[100];
		sprintf(slask,"ID='%lu'",i_id);
		sql += slask;
	}
	spawn(sql);
}


Loguser::~Loguser()
{
}


void Loguser::select(const std::string& sql)
{
	spawn(sql);
}


unsigned __int64 Loguser::insert()
{
	Query q(*database);
	std::string sql;

	sql = "insert into loguser(UserID,DataActivity)";
	{
		char slask[100];
		sprintf(slask," values(%lu",this -> userid);
		sql += slask;
	}
	sql += ", '" + q.GetDatabase().safestr(this -> dataactivity) + "'";
	sql += ")";
	q.execute(sql);
	new_object = 0;
	unsigned __int64 inserted_id = q.insert_id();
	id = inserted_id;
	return inserted_id;
}


void Loguser::update()
{
	update(this -> id);
}


void Loguser::update(unsigned long i_id)
{
	Query q(*database);
	std::string sql;
	{
		char slask[200];
		sprintf(slask,"update loguser set UserID=%lu",this -> userid);
		sql += slask;
	}
	sql += ", DataActivity='" + q.GetDatabase().safestr(this -> dataactivity) + "'";
	{
		char slask[200];
		sprintf(slask," where ID='%lu'",i_id);
		sql += slask;
	}
	q.execute(sql);
}


void Loguser::save()
{
	if (new_object)
		insert();
	else
		update();
}


void Loguser::erase()
{
	if (!new_object)
	{
		std::string sql = "delete from loguser where";
		Query q(*database);
		{
			char slask[200];
			sprintf(slask," ID='%lu'",this -> id);
			sql += slask;
		}
		q.execute(sql);
	}
}


std::string Loguser::xml()
{
	Query q(*database);
	std::string dest;
	char slask[200];
	dest = "<LOGUSER>";
	sprintf(slask,"<ID>%lu</ID>",this -> id);
	dest += slask;
	sprintf(slask,"<USERID>%lu</USERID>",this -> userid);
	dest += slask;
	dest += "<DATAACTIVITY>" + q.GetDatabase().xmlsafestr(this -> dataactivity) + "</DATAACTIVITY>";
	dest += "<LOGDATE>" + q.GetDatabase().xmlsafestr(this -> logdate) + "</LOGDATE>";
	dest += "</LOGUSER>";
	return dest;
}


std::string Loguser::xml(const std::string& tag,const std::string& xvalx)
{
	Query q(*database);
	std::string dest;
	char slask[200];
	dest = "<LOGUSER " + tag + "=\"" + xvalx + "\">";
	sprintf(slask,"<ID>%lu</ID>",this -> id);
	dest += slask;
	sprintf(slask,"<USERID>%lu</USERID>",this -> userid);
	dest += slask;
	dest += "<DATAACTIVITY>" + q.GetDatabase().xmlsafestr(this -> dataactivity) + "</DATAACTIVITY>";
	dest += "<LOGDATE>" + q.GetDatabase().xmlsafestr(this -> logdate) + "</LOGDATE>";
	dest += "</LOGUSER>";
	return dest;
}


size_t Loguser::num_cols()
{
	return 4;
}


void Loguser::clear()
{
	this -> id = 0;
	this -> userid = 0;
	this -> dataactivity = "";
	this -> logdate = "";
}


void Loguser::spawn(const std::string& sql)
{
	Query q(*database);
	std::string temp;

	clear();

	if (!strncasecmp(sql.c_str(),"select * ",9))
	{
		temp = "select ID,UserID,DataActivity,LogDate " + sql.substr(9);
	} else
		temp = sql;
	q.get_result(temp);
	if (q.fetch_row())
	{
		this -> id = q.getuval(0);																				// 0 - id int(10)
		this -> userid = q.getuval(1);																				// 1 - userid int(10)
		this -> dataactivity = q.getstr(2);																				// 2 - dataactivity varchar(500)
		this -> logdate = q.getstr(3);																				// 3 - logdate timestamp
		new_object = 0;
	} else
		clear();
	q.free_result();
}


void Loguser::spawn(Query *qd,int offset)
{
	clear();

	this -> id = qd -> getuval(0 + offset);																				// 0 - id int(10)
	this -> userid = qd -> getuval(1 + offset);																				// 1 - userid int(10)
	this -> dataactivity = qd -> getstr(2 + offset);																				// 2 - dataactivity varchar(500)
	this -> logdate = qd -> getstr(3 + offset);																				// 3 - logdate timestamp
}


// End of implementation of class 'Loguser'

} // End of namespace
namespace db {

/**
 **  Begin class 'Userdevice'
 **/

Userdevice::Userdevice(Database *db)
{
	database = db;
	new_object = 1;
	clear();
}


Userdevice::Userdevice(Database *db,const std::string& sql)
{
	database = db;
	new_object = 1;
	spawn(sql);
}


Userdevice::Userdevice(Database *db,Query *qd,int offset)
{
	database = db;
	new_object = 0;
	spawn(qd, offset);
}


Userdevice::Userdevice(Database& db,unsigned long i_userid,uint64_t i_deviceid):database(&db),new_object(1)
{
	Query q(*database);
	std::string sql = "select * from userdevice where ";
	{
		char slask[100];
		sprintf(slask,"UserId='%lu'",i_userid);
		sql += slask;
	}
	{
		char slask[100];
		sprintf(slask," and DeviceId='%llu'",i_deviceid);
		sql += slask;
	}
	spawn(sql);
}


Userdevice::~Userdevice()
{
}


void Userdevice::select(const std::string& sql)
{
	spawn(sql);
}


unsigned __int64 Userdevice::insert()
{
	Query q(*database);
	std::string sql;

	sql = "insert into userdevice(UserId,DeviceId,ViewAct,UpdateAct,DeleteAct,AssignDate)";
	{
		char slask[100];
		sprintf(slask," values(%lu",this -> userid);
		sql += slask;
	}
	{
		char slask[100];
		sprintf(slask,", %llu",this -> deviceid);
		sql += slask;
	}
	{
		char slask[100];
		sprintf(slask,", %d",this -> viewact);
		sql += slask;
	}
	{
		char slask[100];
		sprintf(slask,", %d",this -> updateact);
		sql += slask;
	}
	{
		char slask[100];
		sprintf(slask,", %d",this -> deleteact);
		sql += slask;
	}
	sql += ", '" + q.GetDatabase().safestr(this -> assigndate) + "'";
	sql += ")";
	q.execute(sql);
	new_object = 0;
	unsigned __int64 inserted_id = q.insert_id();
	id = inserted_id;
	return inserted_id;
}


void Userdevice::update()
{
	update(this -> userid,this -> deviceid);
}


void Userdevice::update(unsigned long i_userid,uint64_t i_deviceid)
{
	Query q(*database);
	std::string sql;
	{
		char slask[200];
		sprintf(slask,"update userdevice set UserId=%lu",this -> userid);
		sql += slask;
	}
	{
		char slask[200];
		sprintf(slask,", DeviceId=%llu",this -> deviceid);
		sql += slask;
	}
	{
		char slask[200];
		sprintf(slask,", ViewAct=%d",this -> viewact);
		sql += slask;
	}
	{
		char slask[200];
		sprintf(slask,", UpdateAct=%d",this -> updateact);
		sql += slask;
	}
	{
		char slask[200];
		sprintf(slask,", DeleteAct=%d",this -> deleteact);
		sql += slask;
	}
	sql += ", AssignDate='" + q.GetDatabase().safestr(this -> assigndate) + "'";
	{
		char slask[200];
		sprintf(slask," where UserId='%lu'",i_userid);
		sql += slask;
	}
	{
		char slask[200];
		sprintf(slask," and DeviceId='%llu'",i_deviceid);
		sql += slask;
	}
	q.execute(sql);
}


void Userdevice::save()
{
	if (new_object)
		insert();
	else
		update();
}


void Userdevice::erase()
{
	if (!new_object)
	{
		std::string sql = "delete from userdevice where";
		Query q(*database);
		{
			char slask[200];
			sprintf(slask," UserId='%lu'",this -> userid);
			sql += slask;
		}
		{
			char slask[200];
			sprintf(slask," and DeviceId='%llu'",this -> deviceid);
			sql += slask;
		}
		q.execute(sql);
	}
}


std::string Userdevice::xml()
{
	Query q(*database);
	std::string dest;
	char slask[200];
	dest = "<USERDEVICE>";
	sprintf(slask,"<ID>%lu</ID>",this -> id);
	dest += slask;
	sprintf(slask,"<USERID>%lu</USERID>",this -> userid);
	dest += slask;
	sprintf(slask,"<DEVICEID>%llu</DEVICEID>",this -> deviceid);
	dest += slask;
	sprintf(slask,"<VIEWACT>%d</VIEWACT>",this -> viewact);
	dest += slask;
	sprintf(slask,"<UPDATEACT>%d</UPDATEACT>",this -> updateact);
	dest += slask;
	sprintf(slask,"<DELETEACT>%d</DELETEACT>",this -> deleteact);
	dest += slask;
	dest += "<ASSIGNDATE>" + q.GetDatabase().xmlsafestr(this -> assigndate) + "</ASSIGNDATE>";
	dest += "</USERDEVICE>";
	return dest;
}


std::string Userdevice::xml(const std::string& tag,const std::string& xvalx)
{
	Query q(*database);
	std::string dest;
	char slask[200];
	dest = "<USERDEVICE " + tag + "=\"" + xvalx + "\">";
	sprintf(slask,"<ID>%lu</ID>",this -> id);
	dest += slask;
	sprintf(slask,"<USERID>%lu</USERID>",this -> userid);
	dest += slask;
	sprintf(slask,"<DEVICEID>%llu</DEVICEID>",this -> deviceid);
	dest += slask;
	sprintf(slask,"<VIEWACT>%d</VIEWACT>",this -> viewact);
	dest += slask;
	sprintf(slask,"<UPDATEACT>%d</UPDATEACT>",this -> updateact);
	dest += slask;
	sprintf(slask,"<DELETEACT>%d</DELETEACT>",this -> deleteact);
	dest += slask;
	dest += "<ASSIGNDATE>" + q.GetDatabase().xmlsafestr(this -> assigndate) + "</ASSIGNDATE>";
	dest += "</USERDEVICE>";
	return dest;
}


size_t Userdevice::num_cols()
{
	return 7;
}


void Userdevice::clear()
{
	this -> id = 0;
	this -> userid = 0;
	this -> deviceid = 0;
	this -> viewact = 0;
	this -> updateact = 0;
	this -> deleteact = 0;
	this -> assigndate = "";
}


void Userdevice::spawn(const std::string& sql)
{
	Query q(*database);
	std::string temp;

	clear();

	if (!strncasecmp(sql.c_str(),"select * ",9))
	{
		temp = "select ID,UserId,DeviceId,ViewAct,UpdateAct,DeleteAct,AssignDate " + sql.substr(9);
	} else
		temp = sql;
	q.get_result(temp);
	if (q.fetch_row())
	{
		this -> id = q.getuval(0);																				// 0 - id int(10)
		this -> userid = q.getuval(1);																				// 1 - userid int(10)
		this -> deviceid = q.getubigint(2);																				// 2 - deviceid bigint(20)
		this -> viewact = q.getval(3);																				// 3 - viewact tinyint(1)
		this -> updateact = q.getval(4);																				// 4 - updateact tinyint(1)
		this -> deleteact = q.getval(5);																				// 5 - deleteact tinyint(1)
		this -> assigndate = q.getstr(6);																				// 6 - assigndate datetime
		new_object = 0;
	} else
		clear();
	q.free_result();
}


void Userdevice::spawn(Query *qd,int offset)
{
	clear();

	this -> id = qd -> getuval(0 + offset);																				// 0 - id int(10)
	this -> userid = qd -> getuval(1 + offset);																				// 1 - userid int(10)
	this -> deviceid = qd -> getubigint(2 + offset);																				// 2 - deviceid bigint(20)
	this -> viewact = qd -> getval(3 + offset);																				// 3 - viewact tinyint(1)
	this -> updateact = qd -> getval(4 + offset);																				// 4 - updateact tinyint(1)
	this -> deleteact = qd -> getval(5 + offset);																				// 5 - deleteact tinyint(1)
	this -> assigndate = qd -> getstr(6 + offset);																				// 6 - assigndate datetime
}


// End of implementation of class 'Userdevice'

} // End of namespace
namespace db {

/**
 **  Begin class 'Users'
 **/

Users::Users(Database *db):usertype(mmap_usertype),status(mmap_status)
{
	database = db;
	new_object = 1;
	clear();
}


Users::Users(Database *db,const std::string& sql):usertype(mmap_usertype),status(mmap_status)
{
	database = db;
	new_object = 1;
	spawn(sql);
}


Users::Users(Database *db,Query *qd,int offset):usertype(mmap_usertype),status(mmap_status)
{
	database = db;
	new_object = 0;
	spawn(qd, offset);
}


Users::Users(Database& db,unsigned long i_userid):usertype(mmap_usertype),status(mmap_status),database(&db),new_object(1)
{
	Query q(*database);
	std::string sql = "select * from users where ";
	{
		char slask[100];
		sprintf(slask,"UserID='%lu'",i_userid);
		sql += slask;
	}
	spawn(sql);
}


Users::Users(Database& db,const std::string&  i_username,const std::string&  i_password):usertype(mmap_usertype),status(mmap_status),database(&db),new_object(1)
{
	Query q(*database);
	std::string sql = "select * from users where ";
	sql += "UserName='" + q.GetDatabase().safestr(i_username) + "'";
	sql += " and Password='" + q.GetDatabase().safestr(i_password) + "'";
	spawn(sql);
}


Users::~Users()
{
}


void Users::select(const std::string& sql)
{
	spawn(sql);
}


unsigned __int64 Users::insert()
{
	Query q(*database);
	std::string sql;

	sql = "insert into users(UserName,Password,UserType,UserFirstName,UserLastName,Status)";
	sql += " values('" + q.GetDatabase().safestr(this -> username) + "'";
	sql += ", '" + q.GetDatabase().safestr(this -> password) + "'";
	sql += ", '" + q.GetDatabase().safestr(this -> usertype.String()) + "'";
	sql += ", '" + q.GetDatabase().safestr(this -> userfirstname) + "'";
	sql += ", '" + q.GetDatabase().safestr(this -> userlastname) + "'";
	sql += ", '" + q.GetDatabase().safestr(this -> status.String()) + "'";
	sql += ")";
	q.execute(sql);
	new_object = 0;
	unsigned __int64 inserted_id = q.insert_id();
	userid = inserted_id;
	return inserted_id;
}


void Users::update()
{
	update(this -> userid);
}


void Users::update(unsigned long i_userid)
{
	Query q(*database);
	std::string sql;
	sql += "update users set UserName='" + q.GetDatabase().safestr(this -> username) + "'";
	sql += ", Password='" + q.GetDatabase().safestr(this -> password) + "'";
	sql += ", UserType='" + q.GetDatabase().safestr(this -> usertype.String()) + "'";
	sql += ", UserFirstName='" + q.GetDatabase().safestr(this -> userfirstname) + "'";
	sql += ", UserLastName='" + q.GetDatabase().safestr(this -> userlastname) + "'";
	sql += ", Status='" + q.GetDatabase().safestr(this -> status.String()) + "'";
	{
		char slask[200];
		sprintf(slask," where UserID='%lu'",i_userid);
		sql += slask;
	}
	q.execute(sql);
}


void Users::save()
{
	if (new_object)
		insert();
	else
		update();
}


void Users::erase()
{
	if (!new_object)
	{
		std::string sql = "delete from users where";
		Query q(*database);
		{
			char slask[200];
			sprintf(slask," UserID='%lu'",this -> userid);
			sql += slask;
		}
		q.execute(sql);
	}
}


std::string Users::xml()
{
	Query q(*database);
	std::string dest;
	char slask[200];
	dest = "<USERS>";
	sprintf(slask,"<USERID>%lu</USERID>",this -> userid);
	dest += slask;
	dest += "<USERNAME>" + q.GetDatabase().xmlsafestr(this -> username) + "</USERNAME>";
	dest += "<PASSWORD>" + q.GetDatabase().xmlsafestr(this -> password) + "</PASSWORD>";
	dest += "<USERTYPE>" + q.GetDatabase().xmlsafestr(this -> usertype.String()) + "</USERTYPE>";
	dest += "<USERFIRSTNAME>" + q.GetDatabase().xmlsafestr(this -> userfirstname) + "</USERFIRSTNAME>";
	dest += "<USERLASTNAME>" + q.GetDatabase().xmlsafestr(this -> userlastname) + "</USERLASTNAME>";
	dest += "<REGISTERDATE>" + q.GetDatabase().xmlsafestr(this -> registerdate) + "</REGISTERDATE>";
	dest += "<STATUS>" + q.GetDatabase().xmlsafestr(this -> status.String()) + "</STATUS>";
	dest += "</USERS>";
	return dest;
}


std::string Users::xml(const std::string& tag,const std::string& xvalx)
{
	Query q(*database);
	std::string dest;
	char slask[200];
	dest = "<USERS " + tag + "=\"" + xvalx + "\">";
	sprintf(slask,"<USERID>%lu</USERID>",this -> userid);
	dest += slask;
	dest += "<USERNAME>" + q.GetDatabase().xmlsafestr(this -> username) + "</USERNAME>";
	dest += "<PASSWORD>" + q.GetDatabase().xmlsafestr(this -> password) + "</PASSWORD>";
	dest += "<USERTYPE>" + q.GetDatabase().xmlsafestr(this -> usertype.String()) + "</USERTYPE>";
	dest += "<USERFIRSTNAME>" + q.GetDatabase().xmlsafestr(this -> userfirstname) + "</USERFIRSTNAME>";
	dest += "<USERLASTNAME>" + q.GetDatabase().xmlsafestr(this -> userlastname) + "</USERLASTNAME>";
	dest += "<REGISTERDATE>" + q.GetDatabase().xmlsafestr(this -> registerdate) + "</REGISTERDATE>";
	dest += "<STATUS>" + q.GetDatabase().xmlsafestr(this -> status.String()) + "</STATUS>";
	dest += "</USERS>";
	return dest;
}


size_t Users::num_cols()
{
	return 8;
}


void Users::clear()
{
	mmap_usertype["Admin"] = 1;
	mmap_usertype["Control"] = 2;
	mmap_usertype["Monitor"] = 3;
	mmap_status["Login"] = 1;
	mmap_status["Logout"] = 2;
	this -> userid = 0;
	this -> username = "";
	this -> password = "";
	this -> usertype = "";
	this -> userfirstname = "";
	this -> userlastname = "";
	this -> registerdate = "";
	this -> status = "";
}


void Users::spawn(const std::string& sql)
{
	Query q(*database);
	std::string temp;

	clear();

	if (!strncasecmp(sql.c_str(),"select * ",9))
	{
		temp = "select UserID,UserName,Password,UserType,UserFirstName,UserLastName,RegisterDate,Status " + sql.substr(9);
	} else
		temp = sql;
	q.get_result(temp);
	if (q.fetch_row())
	{
		this -> userid = q.getuval(0);																				// 0 - userid int(10)
		this -> username = q.getstr(1);																				// 1 - username varchar(50)
		this -> password = q.getstr(2);																				// 2 - password varchar(32)
		this -> usertype = q.getstr(3);																				// 3 - usertype enum('Admin','Control','Monitor')
		this -> userfirstname = q.getstr(4);																				// 4 - userfirstname varchar(50)
		this -> userlastname = q.getstr(5);																				// 5 - userlastname varchar(50)
		this -> registerdate = q.getstr(6);																				// 6 - registerdate timestamp
		this -> status = q.getstr(7);																				// 7 - status enum('Login','Logout')
		new_object = 0;
	} else
		clear();
	q.free_result();
}


void Users::spawn(Query *qd,int offset)
{
	clear();

	this -> userid = qd -> getuval(0 + offset);																				// 0 - userid int(10)
	this -> username = qd -> getstr(1 + offset);																				// 1 - username varchar(50)
	this -> password = qd -> getstr(2 + offset);																				// 2 - password varchar(32)
	this -> usertype = qd -> getstr(3 + offset);																				// 3 - usertype enum('Admin','Control','Monitor')
	this -> userfirstname = qd -> getstr(4 + offset);																				// 4 - userfirstname varchar(50)
	this -> userlastname = qd -> getstr(5 + offset);																				// 5 - userlastname varchar(50)
	this -> registerdate = qd -> getstr(6 + offset);																				// 6 - registerdate timestamp
	this -> status = qd -> getstr(7 + offset);																				// 7 - status enum('Login','Logout')
}


// End of implementation of class 'Users'

} // End of namespace
